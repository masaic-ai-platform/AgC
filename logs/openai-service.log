{"@timestamp":"2025-03-23T12:25:53.920148+05:30","@version":"1","message":"HV000001: Hibernate Validator 8.0.2.Final","logger_name":"org.hibernate.validator.internal.util.Version","thread_name":"background-preinit","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:25:53.953101+05:30","@version":"1","message":"Starting OpenaiApplicationKt using Java 21.0.4 with PID 84994 (/Users/nibha/IdeaProjects/openai/build/classes/kotlin/main started by nibha in /Users/nibha/IdeaProjects/openai)","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:25:53.953887+05:30","@version":"1","message":"No active profile set, falling back to 1 default profile: \"default\"","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:25:54.459575+05:30","@version":"1","message":"Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.aop.config.internalAutoProxyCreator': org/aspectj/lang/annotation/Pointcut","logger_name":"org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-03-23T12:25:54.478757+05:30","@version":"1","message":"Application run failed","logger_name":"org.springframework.boot.SpringApplication","thread_name":"main","level":"ERROR","level_value":40000,"stack_trace":"org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.aop.config.internalAutoProxyCreator': org/aspectj/lang/annotation/Pointcut\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:608)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:346)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207)\n\tat org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:265)\n\tat org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:808)\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:611)\n\tat org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.refresh(ReactiveWebServerApplicationContext.java:66)\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)\n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:318)\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1361)\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1350)\n\tat com.masaic.openai.OpenaiApplicationKt.main(OpenaiApplication.kt:24)\nCaused by: java.lang.NoClassDefFoundError: org/aspectj/lang/annotation/Pointcut\n\tat org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory.<clinit>(AbstractAspectJAdvisorFactory.java:60)\n\tat org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.initBeanFactory(AnnotationAwareAspectJAutoProxyCreator.java:82)\n\tat org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.setBeanFactory(AbstractAdvisorAutoProxyCreator.java:67)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeAwareMethods(AbstractAutowireCapableBeanFactory.java:1833)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)\n\t... 15 common frames omitted\nCaused by: java.lang.ClassNotFoundException: org.aspectj.lang.annotation.Pointcut\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)\n\t... 21 common frames omitted\n"}
{"@timestamp":"2025-03-23T12:28:09.358753+05:30","@version":"1","message":"HV000001: Hibernate Validator 8.0.2.Final","logger_name":"org.hibernate.validator.internal.util.Version","thread_name":"background-preinit","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:28:09.407379+05:30","@version":"1","message":"Starting OpenaiApplicationKt using Java 21.0.4 with PID 85527 (/Users/nibha/IdeaProjects/openai/build/classes/kotlin/main started by nibha in /Users/nibha/IdeaProjects/openai)","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:28:09.40823+05:30","@version":"1","message":"No active profile set, falling back to 1 default profile: \"default\"","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:28:09.9769+05:30","@version":"1","message":"Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.aop.config.internalAutoProxyCreator': org/aspectj/lang/annotation/Pointcut","logger_name":"org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-03-23T12:28:09.995262+05:30","@version":"1","message":"Application run failed","logger_name":"org.springframework.boot.SpringApplication","thread_name":"main","level":"ERROR","level_value":40000,"stack_trace":"org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.aop.config.internalAutoProxyCreator': org/aspectj/lang/annotation/Pointcut\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:608)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:346)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207)\n\tat org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:265)\n\tat org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:808)\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:611)\n\tat org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.refresh(ReactiveWebServerApplicationContext.java:66)\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)\n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:318)\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1361)\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1350)\n\tat com.masaic.openai.OpenaiApplicationKt.main(OpenaiApplication.kt:24)\nCaused by: java.lang.NoClassDefFoundError: org/aspectj/lang/annotation/Pointcut\n\tat org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory.<clinit>(AbstractAspectJAdvisorFactory.java:60)\n\tat org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.initBeanFactory(AnnotationAwareAspectJAutoProxyCreator.java:82)\n\tat org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.setBeanFactory(AbstractAdvisorAutoProxyCreator.java:67)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeAwareMethods(AbstractAutowireCapableBeanFactory.java:1833)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)\n\t... 15 common frames omitted\nCaused by: java.lang.ClassNotFoundException: org.aspectj.lang.annotation.Pointcut\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)\n\t... 21 common frames omitted\n"}
{"@timestamp":"2025-03-23T12:29:23.496331+05:30","@version":"1","message":"HV000001: Hibernate Validator 8.0.2.Final","logger_name":"org.hibernate.validator.internal.util.Version","thread_name":"background-preinit","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:23.547001+05:30","@version":"1","message":"Starting OpenaiApplicationKt using Java 21.0.4 with PID 85799 (/Users/nibha/IdeaProjects/openai/build/classes/kotlin/main started by nibha in /Users/nibha/IdeaProjects/openai)","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:23.548969+05:30","@version":"1","message":"No active profile set, falling back to 1 default profile: \"default\"","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:25.076824+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:29.055573+05:30","@version":"1","message":"MCP StdIO client connected for github server with command: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:29.1022+05:30","@version":"1","message":"Adding tool: McpTool(name='create_or_update_file', description='Create or update a single file in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:29.102387+05:30","@version":"1","message":"Adding tool: McpTool(name='search_repositories', description='Search for GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:29.10252+05:30","@version":"1","message":"Adding tool: McpTool(name='create_repository', description='Create a new GitHub repository in your account', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:29.102592+05:30","@version":"1","message":"Adding tool: McpTool(name='get_file_contents', description='Get the contents of a file or directory from a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:29.10262+05:30","@version":"1","message":"Adding tool: McpTool(name='push_files', description='Push multiple files to a GitHub repository in a single commit', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:29.102689+05:30","@version":"1","message":"Adding tool: McpTool(name='create_issue', description='Create a new issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:29.102739+05:30","@version":"1","message":"Adding tool: McpTool(name='create_pull_request', description='Create a new pull request in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:29.10278+05:30","@version":"1","message":"Adding tool: McpTool(name='fork_repository', description='Fork a GitHub repository to your account or specified organization', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:29.102822+05:30","@version":"1","message":"Adding tool: McpTool(name='create_branch', description='Create a new branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:29.102846+05:30","@version":"1","message":"Adding tool: McpTool(name='list_commits', description='Get list of commits of a branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:29.102885+05:30","@version":"1","message":"Adding tool: McpTool(name='list_issues', description='List issues in a GitHub repository with filtering options', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:29.102928+05:30","@version":"1","message":"Adding tool: McpTool(name='update_issue', description='Update an existing issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:29.102966+05:30","@version":"1","message":"Adding tool: McpTool(name='add_issue_comment', description='Add a comment to an existing issue', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:29.103004+05:30","@version":"1","message":"Adding tool: McpTool(name='search_code', description='Search for code across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:29.103064+05:30","@version":"1","message":"Adding tool: McpTool(name='search_issues', description='Search for issues and pull requests across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:29.10311+05:30","@version":"1","message":"Adding tool: McpTool(name='search_users', description='Search for users on GitHub', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:29.103158+05:30","@version":"1","message":"Adding tool: McpTool(name='get_issue', description='Get details of a specific issue in a GitHub repository.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:29.103236+05:30","@version":"1","message":"Successfully loaded tools for MCP server: github","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:29.103425+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:29.308309+05:30","@version":"1","message":"MCP StdIO client connected for brave-search server with command: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:29.310497+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_web_search', description='Performs a web search using the Brave Search API, ideal for general queries, news, articles, and online content. Use this for broad information gathering, recent events, or when you need diverse web sources. Supports pagination, content filtering, and freshness controls. Maximum 20 results per request, with offset for pagination. ', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:29.310627+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_local_search', description='Searches for local businesses and places using Brave's Local Search API. Best for queries related to physical locations, businesses, restaurants, services, etc. Returns detailed information including:\n- Business names and addresses\n- Ratings and review counts\n- Phone numbers and opening hours\nUse this when the query implies 'near me' or mentions specific locations. Automatically falls back to web search if no local results are found.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:29.310657+05:30","@version":"1","message":"Successfully loaded tools for MCP server: brave-search","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:29:29.424178+05:30","@version":"1","message":"Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'observedAspect' defined in class path resource [com/masaic/openai/api/config/LoggingConfig.class]: Unsatisfied dependency expressed through method 'observedAspect' parameter 0: No qualifying bean of type 'io.micrometer.observation.ObservationRegistry' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}","logger_name":"org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-03-23T12:29:29.475926+05:30","@version":"1","message":"\n\n***************************\nAPPLICATION FAILED TO START\n***************************\n\nDescription:\n\nParameter 0 of method observedAspect in com.masaic.openai.api.config.LoggingConfig required a bean of type 'io.micrometer.observation.ObservationRegistry' that could not be found.\n\n\nAction:\n\nConsider defining a bean of type 'io.micrometer.observation.ObservationRegistry' in your configuration.\n","logger_name":"org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter","thread_name":"main","level":"ERROR","level_value":40000}
{"@timestamp":"2025-03-23T12:32:04.163735+05:30","@version":"1","message":"HV000001: Hibernate Validator 8.0.2.Final","logger_name":"org.hibernate.validator.internal.util.Version","thread_name":"background-preinit","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:04.425069+05:30","@version":"1","message":"Starting OpenaiApplicationKt using Java 21.0.4 with PID 86346 (/Users/nibha/IdeaProjects/openai/build/classes/kotlin/main started by nibha in /Users/nibha/IdeaProjects/openai)","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:04.425545+05:30","@version":"1","message":"No active profile set, falling back to 1 default profile: \"default\"","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:06.002989+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:08.066408+05:30","@version":"1","message":"MCP StdIO client connected for github server with command: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:08.119058+05:30","@version":"1","message":"Adding tool: McpTool(name='create_or_update_file', description='Create or update a single file in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:08.119237+05:30","@version":"1","message":"Adding tool: McpTool(name='search_repositories', description='Search for GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:08.119293+05:30","@version":"1","message":"Adding tool: McpTool(name='create_repository', description='Create a new GitHub repository in your account', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:08.119402+05:30","@version":"1","message":"Adding tool: McpTool(name='get_file_contents', description='Get the contents of a file or directory from a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:08.119608+05:30","@version":"1","message":"Adding tool: McpTool(name='push_files', description='Push multiple files to a GitHub repository in a single commit', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:08.119661+05:30","@version":"1","message":"Adding tool: McpTool(name='create_issue', description='Create a new issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:08.11983+05:30","@version":"1","message":"Adding tool: McpTool(name='create_pull_request', description='Create a new pull request in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:08.119948+05:30","@version":"1","message":"Adding tool: McpTool(name='fork_repository', description='Fork a GitHub repository to your account or specified organization', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:08.120127+05:30","@version":"1","message":"Adding tool: McpTool(name='create_branch', description='Create a new branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:08.120335+05:30","@version":"1","message":"Adding tool: McpTool(name='list_commits', description='Get list of commits of a branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:08.12046+05:30","@version":"1","message":"Adding tool: McpTool(name='list_issues', description='List issues in a GitHub repository with filtering options', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:08.120609+05:30","@version":"1","message":"Adding tool: McpTool(name='update_issue', description='Update an existing issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:08.120723+05:30","@version":"1","message":"Adding tool: McpTool(name='add_issue_comment', description='Add a comment to an existing issue', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:08.120782+05:30","@version":"1","message":"Adding tool: McpTool(name='search_code', description='Search for code across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:08.12081+05:30","@version":"1","message":"Adding tool: McpTool(name='search_issues', description='Search for issues and pull requests across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:08.120864+05:30","@version":"1","message":"Adding tool: McpTool(name='search_users', description='Search for users on GitHub', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:08.120964+05:30","@version":"1","message":"Adding tool: McpTool(name='get_issue', description='Get details of a specific issue in a GitHub repository.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:08.121095+05:30","@version":"1","message":"Successfully loaded tools for MCP server: github","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:08.121544+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:08.42905+05:30","@version":"1","message":"MCP StdIO client connected for brave-search server with command: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:08.43034+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_web_search', description='Performs a web search using the Brave Search API, ideal for general queries, news, articles, and online content. Use this for broad information gathering, recent events, or when you need diverse web sources. Supports pagination, content filtering, and freshness controls. Maximum 20 results per request, with offset for pagination. ', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:08.430438+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_local_search', description='Searches for local businesses and places using Brave's Local Search API. Best for queries related to physical locations, businesses, restaurants, services, etc. Returns detailed information including:\n- Business names and addresses\n- Ratings and review counts\n- Phone numbers and opening hours\nUse this when the query implies 'near me' or mentions specific locations. Automatically falls back to web search if no local results are found.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:08.430463+05:30","@version":"1","message":"Successfully loaded tools for MCP server: brave-search","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:32:09.135602+05:30","@version":"1","message":"[fa70eaba] Unknown channel option 'SO_KEEPALIVE' for channel '[id: 0xfa70eaba]'","logger_name":"reactor.netty.transport.TransportConnector","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-03-23T12:32:09.15605+05:30","@version":"1","message":"Started OpenaiApplicationKt in 6.241 seconds (process running for 6.998)","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:07.46514+05:30","@version":"1","message":"HV000001: Hibernate Validator 8.0.2.Final","logger_name":"org.hibernate.validator.internal.util.Version","thread_name":"background-preinit","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:07.49547+05:30","@version":"1","message":"Starting OpenaiApplicationKt using Java 21.0.4 with PID 86566 (/Users/nibha/IdeaProjects/openai/build/classes/kotlin/main started by nibha in /Users/nibha/IdeaProjects/openai)","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:07.495857+05:30","@version":"1","message":"No active profile set, falling back to 1 default profile: \"default\"","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:08.397737+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:08.752886+05:30","@version":"1","message":"MCP StdIO client connected for github server with command: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:08.792383+05:30","@version":"1","message":"Adding tool: McpTool(name='create_or_update_file', description='Create or update a single file in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:08.792542+05:30","@version":"1","message":"Adding tool: McpTool(name='search_repositories', description='Search for GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:08.792593+05:30","@version":"1","message":"Adding tool: McpTool(name='create_repository', description='Create a new GitHub repository in your account', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:08.792637+05:30","@version":"1","message":"Adding tool: McpTool(name='get_file_contents', description='Get the contents of a file or directory from a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:08.79266+05:30","@version":"1","message":"Adding tool: McpTool(name='push_files', description='Push multiple files to a GitHub repository in a single commit', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:08.792696+05:30","@version":"1","message":"Adding tool: McpTool(name='create_issue', description='Create a new issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:08.792741+05:30","@version":"1","message":"Adding tool: McpTool(name='create_pull_request', description='Create a new pull request in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:08.792781+05:30","@version":"1","message":"Adding tool: McpTool(name='fork_repository', description='Fork a GitHub repository to your account or specified organization', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:08.792817+05:30","@version":"1","message":"Adding tool: McpTool(name='create_branch', description='Create a new branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:08.792838+05:30","@version":"1","message":"Adding tool: McpTool(name='list_commits', description='Get list of commits of a branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:08.792879+05:30","@version":"1","message":"Adding tool: McpTool(name='list_issues', description='List issues in a GitHub repository with filtering options', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:08.792922+05:30","@version":"1","message":"Adding tool: McpTool(name='update_issue', description='Update an existing issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:08.792962+05:30","@version":"1","message":"Adding tool: McpTool(name='add_issue_comment', description='Add a comment to an existing issue', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:08.792998+05:30","@version":"1","message":"Adding tool: McpTool(name='search_code', description='Search for code across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:08.793021+05:30","@version":"1","message":"Adding tool: McpTool(name='search_issues', description='Search for issues and pull requests across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:08.793089+05:30","@version":"1","message":"Adding tool: McpTool(name='search_users', description='Search for users on GitHub', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:08.793135+05:30","@version":"1","message":"Adding tool: McpTool(name='get_issue', description='Get details of a specific issue in a GitHub repository.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:08.793335+05:30","@version":"1","message":"Successfully loaded tools for MCP server: github","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:08.793401+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:08.991363+05:30","@version":"1","message":"MCP StdIO client connected for brave-search server with command: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:08.993+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_web_search', description='Performs a web search using the Brave Search API, ideal for general queries, news, articles, and online content. Use this for broad information gathering, recent events, or when you need diverse web sources. Supports pagination, content filtering, and freshness controls. Maximum 20 results per request, with offset for pagination. ', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:08.993139+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_local_search', description='Searches for local businesses and places using Brave's Local Search API. Best for queries related to physical locations, businesses, restaurants, services, etc. Returns detailed information including:\n- Business names and addresses\n- Ratings and review counts\n- Phone numbers and opening hours\nUse this when the query implies 'near me' or mentions specific locations. Automatically falls back to web search if no local results are found.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:08.993163+05:30","@version":"1","message":"Successfully loaded tools for MCP server: brave-search","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:09.511809+05:30","@version":"1","message":"[db217f1e] Unknown channel option 'TCP_NODELAY' for channel '[id: 0xdb217f1e]'","logger_name":"reactor.netty.transport.TransportConnector","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-03-23T12:33:09.527571+05:30","@version":"1","message":"Started OpenaiApplicationKt in 2.455 seconds (process running for 2.783)","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:48.622877+05:30","@version":"1","message":"HV000001: Hibernate Validator 8.0.2.Final","logger_name":"org.hibernate.validator.internal.util.Version","thread_name":"background-preinit","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:48.657318+05:30","@version":"1","message":"Starting OpenaiApplicationKt using Java 21.0.4 with PID 86711 (/Users/nibha/IdeaProjects/openai/build/classes/kotlin/main started by nibha in /Users/nibha/IdeaProjects/openai)","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:48.657696+05:30","@version":"1","message":"No active profile set, falling back to 1 default profile: \"default\"","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:49.502696+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:49.820588+05:30","@version":"1","message":"MCP StdIO client connected for github server with command: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:49.850187+05:30","@version":"1","message":"Adding tool: McpTool(name='create_or_update_file', description='Create or update a single file in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:49.850337+05:30","@version":"1","message":"Adding tool: McpTool(name='search_repositories', description='Search for GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:49.850387+05:30","@version":"1","message":"Adding tool: McpTool(name='create_repository', description='Create a new GitHub repository in your account', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:49.850521+05:30","@version":"1","message":"Adding tool: McpTool(name='get_file_contents', description='Get the contents of a file or directory from a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:49.850547+05:30","@version":"1","message":"Adding tool: McpTool(name='push_files', description='Push multiple files to a GitHub repository in a single commit', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:49.850587+05:30","@version":"1","message":"Adding tool: McpTool(name='create_issue', description='Create a new issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:49.850626+05:30","@version":"1","message":"Adding tool: McpTool(name='create_pull_request', description='Create a new pull request in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:49.850663+05:30","@version":"1","message":"Adding tool: McpTool(name='fork_repository', description='Fork a GitHub repository to your account or specified organization', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:49.850695+05:30","@version":"1","message":"Adding tool: McpTool(name='create_branch', description='Create a new branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:49.850714+05:30","@version":"1","message":"Adding tool: McpTool(name='list_commits', description='Get list of commits of a branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:49.850745+05:30","@version":"1","message":"Adding tool: McpTool(name='list_issues', description='List issues in a GitHub repository with filtering options', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:49.850776+05:30","@version":"1","message":"Adding tool: McpTool(name='update_issue', description='Update an existing issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:49.850813+05:30","@version":"1","message":"Adding tool: McpTool(name='add_issue_comment', description='Add a comment to an existing issue', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:49.850847+05:30","@version":"1","message":"Adding tool: McpTool(name='search_code', description='Search for code across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:49.850866+05:30","@version":"1","message":"Adding tool: McpTool(name='search_issues', description='Search for issues and pull requests across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:49.850899+05:30","@version":"1","message":"Adding tool: McpTool(name='search_users', description='Search for users on GitHub', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:49.850937+05:30","@version":"1","message":"Adding tool: McpTool(name='get_issue', description='Get details of a specific issue in a GitHub repository.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:49.851026+05:30","@version":"1","message":"Successfully loaded tools for MCP server: github","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:49.851098+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:50.037084+05:30","@version":"1","message":"MCP StdIO client connected for brave-search server with command: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:50.038769+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_web_search', description='Performs a web search using the Brave Search API, ideal for general queries, news, articles, and online content. Use this for broad information gathering, recent events, or when you need diverse web sources. Supports pagination, content filtering, and freshness controls. Maximum 20 results per request, with offset for pagination. ', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:50.03887+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_local_search', description='Searches for local businesses and places using Brave's Local Search API. Best for queries related to physical locations, businesses, restaurants, services, etc. Returns detailed information including:\n- Business names and addresses\n- Ratings and review counts\n- Phone numbers and opening hours\nUse this when the query implies 'near me' or mentions specific locations. Automatically falls back to web search if no local results are found.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:50.038893+05:30","@version":"1","message":"Successfully loaded tools for MCP server: brave-search","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:50.531519+05:30","@version":"1","message":"Started OpenaiApplicationKt in 2.246 seconds (process running for 2.512)","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:58.599096+05:30","@version":"1","message":"Incoming request - method: POST, path: /v1/responses, client: 0:0:0:0:0:0:0:1, traceId: 92a18cb49aa347ca866451e1770cc809","logger_name":"com.masaic.openai.api.config.LoggingConfig","thread_name":"reactor-http-nio-3","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:33:58.87655+05:30","@version":"1","message":"Creating streaming response with traceId: unknown, model: gpt-4o","logger_name":"com.masaic.openai.api.service.MasaicResponseService","thread_name":"reactor-http-nio-3","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:34:05.836897+05:30","@version":"1","message":"Stream completed successfully - traceId: unknown","logger_name":"com.masaic.openai.api.service.MasaicResponseService","thread_name":"openai-stream-handler-thread-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:34:05.838767+05:30","@version":"1","message":"Request completed - status: 200 OK, traceId: 92a18cb49aa347ca866451e1770cc809, path: /v1/responses","logger_name":"com.masaic.openai.api.config.LoggingConfig","thread_name":"reactor-http-nio-3","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:38:48.690019+05:30","@version":"1","message":"Incoming request - method: POST, path: /v1/responses, client: 0:0:0:0:0:0:0:1, traceId: 9526c5d321484ba1ac6386b716c70e60","logger_name":"com.masaic.openai.api.config.LoggingConfig","thread_name":"reactor-http-nio-5","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:38:48.818058+05:30","@version":"1","message":"Creating response with traceId: unknown, model: gpt-4o","logger_name":"com.masaic.openai.api.service.MasaicResponseService","thread_name":"reactor-http-nio-5","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:38:48.837919+05:30","@version":"1","message":"Error creating response - traceId: unknown","logger_name":"com.masaic.openai.api.service.MasaicResponseService","thread_name":"reactor-http-nio-5","level":"ERROR","level_value":40000,"stack_trace":"com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `java.util.LinkedHashMap<java.lang.String,com.openai.core.JsonValue>` from Boolean value (token `JsonToken.VALUE_FALSE`)\n at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 437] (through reference chain: com.openai.models.ResponseFormatJsonSchema$JsonSchema[\"additionalProperties\"])\n\tat com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:59)\n\tat com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1767)\n\tat com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1541)\n\tat com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1488)\n\tat com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:460)\n\tat com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:32)\n\tat com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:543)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithErrorWrapping(BeanDeserializer.java:585)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:447)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1497)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:348)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)\n\tat com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:342)\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4917)\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3860)\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3828)\n\tat com.masaic.openai.api.client.MasaicParameterConverter.applyResponseFormatting(MasaicParameterConverter.kt:294)\n\tat com.masaic.openai.api.client.MasaicParameterConverter.prepareCompletion(MasaicParameterConverter.kt:34)\n\tat com.masaic.openai.api.client.MasaicOpenAiResponseServiceImpl.create(MasaicOpenAiResponseServiceImpl.kt:65)\n\tat com.masaic.openai.api.service.MasaicResponseService$createResponse$3.invokeSuspend(MasaicResponseService.kt:111)\n\tat com.masaic.openai.api.service.MasaicResponseService$createResponse$3.invoke(MasaicResponseService.kt)\n\tat com.masaic.openai.api.service.MasaicResponseService$createResponse$3.invoke(MasaicResponseService.kt)\n\tat kotlinx.coroutines.intrinsics.UndispatchedKt.startUndispatchedOrReturnIgnoreTimeout(Undispatched.kt:72)\n\tat kotlinx.coroutines.TimeoutKt.setupTimeout(Timeout.kt:148)\n\tat kotlinx.coroutines.TimeoutKt.withTimeout(Timeout.kt:43)\n\tat com.masaic.openai.api.service.MasaicResponseService.createResponse$suspendImpl(MasaicResponseService.kt:110)\n\tat com.masaic.openai.api.service.MasaicResponseService.createResponse(MasaicResponseService.kt)\n\tat com.masaic.openai.api.controller.ResponseController.createResponse$suspendImpl(ResponseController.kt:72)\n\tat com.masaic.openai.api.controller.ResponseController.createResponse(ResponseController.kt)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat kotlin.reflect.jvm.internal.calls.CallerImpl$Method.callMethod(CallerImpl.kt:97)\n\tat kotlin.reflect.jvm.internal.calls.CallerImpl$Method$Instance.call(CallerImpl.kt:113)\n\tat kotlin.reflect.jvm.internal.KCallableImpl.callDefaultMethod$kotlin_reflection(KCallableImpl.kt:207)\n\tat kotlin.reflect.full.KCallables.callSuspendBy(KCallables.kt:74)\n\tat org.springframework.core.CoroutinesUtils.lambda$invokeSuspendingFunction$3(CoroutinesUtils.java:146)\n\tat kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$4.invokeSuspend(IntrinsicsJvm.kt:241)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.internal.DispatchedContinuationKt.resumeCancellableWith(DispatchedContinuation.kt:363)\n\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable(Cancellable.kt:26)\n\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable$default(Cancellable.kt:21)\n\tat kotlinx.coroutines.CoroutineStart.invoke(CoroutineStart.kt:88)\n\tat kotlinx.coroutines.AbstractCoroutine.start(AbstractCoroutine.kt:123)\n\tat kotlinx.coroutines.reactor.MonoKt.monoInternal$lambda$2(Mono.kt:88)\n\tat reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:61)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)\n\tat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)\n\tat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)\n\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)\n\tat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)\n\tat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)\n\tat reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)\n\tat reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)\n\tat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)\n\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)\n\tat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)\n\tat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)\n\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\tat reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)\n\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)\n\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:413)\n\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:455)\n\tat reactor.netty.http.server.HttpServerOperations.handleLastHttpContent(HttpServerOperations.java:888)\n\tat reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:797)\n\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:115)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:321)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)\n\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n"}
{"@timestamp":"2025-03-23T12:38:48.85584+05:30","@version":"1","message":"Error processing response: Error processing response: Cannot deserialize value of type `java.util.LinkedHashMap<java.lang.String,com.openai.core.JsonValue>` from Boolean value (token `JsonToken.VALUE_FALSE`)\n at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 437] (through reference chain: com.openai.models.ResponseFormatJsonSchema$JsonSchema[\"additionalProperties\"])","logger_name":"com.masaic.openai.api.controller.ExceptionHandler","thread_name":"reactor-http-nio-5","level":"ERROR","level_value":40000,"stack_trace":"com.masaic.openai.api.service.ResponseProcessingException: Error processing response: Cannot deserialize value of type `java.util.LinkedHashMap<java.lang.String,com.openai.core.JsonValue>` from Boolean value (token `JsonToken.VALUE_FALSE`)\n at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 437] (through reference chain: com.openai.models.ResponseFormatJsonSchema$JsonSchema[\"additionalProperties\"])\n\tat com.masaic.openai.api.service.MasaicResponseService.createResponse$suspendImpl(MasaicResponseService.kt:130)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ Handler com.masaic.openai.api.controller.ResponseController#createResponse(CreateResponseRequest, MultiValueMap, MultiValueMap, Continuation) [DispatcherHandler]\nOriginal Stack Trace:\n\t\tat com.masaic.openai.api.service.MasaicResponseService.createResponse$suspendImpl(MasaicResponseService.kt:130)\n\t\tat com.masaic.openai.api.service.MasaicResponseService.createResponse(MasaicResponseService.kt)\n\t\tat com.masaic.openai.api.controller.ResponseController.createResponse$suspendImpl(ResponseController.kt:72)\n\t\tat com.masaic.openai.api.controller.ResponseController.createResponse(ResponseController.kt)\n\t\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\t\tat kotlin.reflect.jvm.internal.calls.CallerImpl$Method.callMethod(CallerImpl.kt:97)\n\t\tat kotlin.reflect.jvm.internal.calls.CallerImpl$Method$Instance.call(CallerImpl.kt:113)\n\t\tat kotlin.reflect.jvm.internal.KCallableImpl.callDefaultMethod$kotlin_reflection(KCallableImpl.kt:207)\n\t\tat kotlin.reflect.full.KCallables.callSuspendBy(KCallables.kt:74)\n\t\tat org.springframework.core.CoroutinesUtils.lambda$invokeSuspendingFunction$3(CoroutinesUtils.java:146)\n\t\tat kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$4.invokeSuspend(IntrinsicsJvm.kt:241)\n\t\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\t\tat kotlinx.coroutines.internal.DispatchedContinuationKt.resumeCancellableWith(DispatchedContinuation.kt:363)\n\t\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable(Cancellable.kt:26)\n\t\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable$default(Cancellable.kt:21)\n\t\tat kotlinx.coroutines.CoroutineStart.invoke(CoroutineStart.kt:88)\n\t\tat kotlinx.coroutines.AbstractCoroutine.start(AbstractCoroutine.kt:123)\n\t\tat kotlinx.coroutines.reactor.MonoKt.monoInternal$lambda$2(Mono.kt:88)\n\t\tat reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:61)\n\t\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)\n\t\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)\n\t\tat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)\n\t\tat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)\n\t\tat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)\n\t\tat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)\n\t\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)\n\t\tat reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)\n\t\tat reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)\n\t\tat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)\n\t\tat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)\n\t\tat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)\n\t\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:413)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:455)\n\t\tat reactor.netty.http.server.HttpServerOperations.handleLastHttpContent(HttpServerOperations.java:888)\n\t\tat reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:797)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:115)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:321)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)\n\t\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\t\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)\n\t\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)\n\t\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)\n\t\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:1583)\n"}
{"@timestamp":"2025-03-23T12:38:48.870515+05:30","@version":"1","message":"Request completed - status: 500 INTERNAL_SERVER_ERROR, traceId: 9526c5d321484ba1ac6386b716c70e60, path: /v1/responses","logger_name":"com.masaic.openai.api.config.LoggingConfig","thread_name":"reactor-http-nio-5","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:26.03682+05:30","@version":"1","message":"HV000001: Hibernate Validator 8.0.2.Final","logger_name":"org.hibernate.validator.internal.util.Version","thread_name":"background-preinit","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:26.061662+05:30","@version":"1","message":"Starting OpenaiApplicationKt using Java 21.0.4 with PID 88232 (/Users/nibha/IdeaProjects/openai/build/classes/kotlin/main started by nibha in /Users/nibha/IdeaProjects/openai)","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:26.062553+05:30","@version":"1","message":"No active profile set, falling back to 1 default profile: \"default\"","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:26.838264+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:27.488182+05:30","@version":"1","message":"MCP StdIO client connected for github server with command: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:27.520431+05:30","@version":"1","message":"Adding tool: McpTool(name='create_or_update_file', description='Create or update a single file in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:27.520569+05:30","@version":"1","message":"Adding tool: McpTool(name='search_repositories', description='Search for GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:27.520619+05:30","@version":"1","message":"Adding tool: McpTool(name='create_repository', description='Create a new GitHub repository in your account', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:27.520662+05:30","@version":"1","message":"Adding tool: McpTool(name='get_file_contents', description='Get the contents of a file or directory from a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:27.520685+05:30","@version":"1","message":"Adding tool: McpTool(name='push_files', description='Push multiple files to a GitHub repository in a single commit', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:27.52072+05:30","@version":"1","message":"Adding tool: McpTool(name='create_issue', description='Create a new issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:27.520759+05:30","@version":"1","message":"Adding tool: McpTool(name='create_pull_request', description='Create a new pull request in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:27.520794+05:30","@version":"1","message":"Adding tool: McpTool(name='fork_repository', description='Fork a GitHub repository to your account or specified organization', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:27.520827+05:30","@version":"1","message":"Adding tool: McpTool(name='create_branch', description='Create a new branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:27.520845+05:30","@version":"1","message":"Adding tool: McpTool(name='list_commits', description='Get list of commits of a branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:27.520878+05:30","@version":"1","message":"Adding tool: McpTool(name='list_issues', description='List issues in a GitHub repository with filtering options', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:27.520909+05:30","@version":"1","message":"Adding tool: McpTool(name='update_issue', description='Update an existing issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:27.520943+05:30","@version":"1","message":"Adding tool: McpTool(name='add_issue_comment', description='Add a comment to an existing issue', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:27.520975+05:30","@version":"1","message":"Adding tool: McpTool(name='search_code', description='Search for code across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:27.520993+05:30","@version":"1","message":"Adding tool: McpTool(name='search_issues', description='Search for issues and pull requests across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:27.521026+05:30","@version":"1","message":"Adding tool: McpTool(name='search_users', description='Search for users on GitHub', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:27.521093+05:30","@version":"1","message":"Adding tool: McpTool(name='get_issue', description='Get details of a specific issue in a GitHub repository.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:27.521138+05:30","@version":"1","message":"Successfully loaded tools for MCP server: github","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:27.521181+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:27.700422+05:30","@version":"1","message":"MCP StdIO client connected for brave-search server with command: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:27.702411+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_web_search', description='Performs a web search using the Brave Search API, ideal for general queries, news, articles, and online content. Use this for broad information gathering, recent events, or when you need diverse web sources. Supports pagination, content filtering, and freshness controls. Maximum 20 results per request, with offset for pagination. ', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:27.702625+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_local_search', description='Searches for local businesses and places using Brave's Local Search API. Best for queries related to physical locations, businesses, restaurants, services, etc. Returns detailed information including:\n- Business names and addresses\n- Ratings and review counts\n- Phone numbers and opening hours\nUse this when the query implies 'near me' or mentions specific locations. Automatically falls back to web search if no local results are found.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:27.702687+05:30","@version":"1","message":"Successfully loaded tools for MCP server: brave-search","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:28.269127+05:30","@version":"1","message":"Started OpenaiApplicationKt in 2.549 seconds (process running for 2.859)","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:53.885321+05:30","@version":"1","message":"Incoming request - method: POST, path: /v1/responses, client: 0:0:0:0:0:0:0:1, traceId: 9d4b20fdbc6547c6b0d287dbc956c575","logger_name":"com.masaic.openai.api.config.LoggingConfig","thread_name":"reactor-http-nio-3","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:42:54.191094+05:30","@version":"1","message":"Creating response with traceId: 9d4b20fdbc6547c6b0d287dbc956c575, model: gpt-4o","logger_name":"com.masaic.openai.api.service.MasaicResponseService","thread_name":"reactor-http-nio-3","level":"INFO","level_value":20000,"traceId":"9d4b20fdbc6547c6b0d287dbc956c575"}
{"@timestamp":"2025-03-23T12:42:54.345188+05:30","@version":"1","message":"Error creating response - traceId: 9d4b20fdbc6547c6b0d287dbc956c575","logger_name":"com.masaic.openai.api.service.MasaicResponseService","thread_name":"reactor-http-nio-3","level":"ERROR","level_value":40000,"stack_trace":"com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `java.util.LinkedHashMap<java.lang.String,com.openai.core.JsonValue>` from Boolean value (token `JsonToken.VALUE_FALSE`)\n at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 437] (through reference chain: com.openai.models.ResponseFormatJsonSchema$JsonSchema[\"additionalProperties\"])\n\tat com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:59)\n\tat com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1767)\n\tat com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1541)\n\tat com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1488)\n\tat com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:460)\n\tat com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:32)\n\tat com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:543)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithErrorWrapping(BeanDeserializer.java:585)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:447)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1497)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:348)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)\n\tat com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:342)\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4917)\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3860)\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3828)\n\tat com.masaic.openai.api.client.MasaicParameterConverter.applyResponseFormatting(MasaicParameterConverter.kt:294)\n\tat com.masaic.openai.api.client.MasaicParameterConverter.prepareCompletion(MasaicParameterConverter.kt:34)\n\tat com.masaic.openai.api.client.MasaicOpenAiResponseServiceImpl.create(MasaicOpenAiResponseServiceImpl.kt:65)\n\tat com.masaic.openai.api.service.MasaicResponseService$createResponse$3.invokeSuspend(MasaicResponseService.kt:136)\n\tat com.masaic.openai.api.service.MasaicResponseService$createResponse$3.invoke(MasaicResponseService.kt)\n\tat com.masaic.openai.api.service.MasaicResponseService$createResponse$3.invoke(MasaicResponseService.kt)\n\tat kotlinx.coroutines.intrinsics.UndispatchedKt.startUndispatchedOrReturnIgnoreTimeout(Undispatched.kt:72)\n\tat kotlinx.coroutines.TimeoutKt.setupTimeout(Timeout.kt:148)\n\tat kotlinx.coroutines.TimeoutKt.withTimeout(Timeout.kt:43)\n\tat com.masaic.openai.api.service.MasaicResponseService.createResponse$suspendImpl(MasaicResponseService.kt:135)\n\tat com.masaic.openai.api.service.MasaicResponseService.createResponse(MasaicResponseService.kt)\n\tat com.masaic.openai.api.controller.ResponseController.createResponse$suspendImpl(ResponseController.kt:81)\n\tat com.masaic.openai.api.controller.ResponseController.createResponse(ResponseController.kt)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat kotlin.reflect.jvm.internal.calls.CallerImpl$Method.callMethod(CallerImpl.kt:97)\n\tat kotlin.reflect.jvm.internal.calls.CallerImpl$Method$Instance.call(CallerImpl.kt:113)\n\tat kotlin.reflect.jvm.internal.KCallableImpl.callDefaultMethod$kotlin_reflection(KCallableImpl.kt:207)\n\tat kotlin.reflect.full.KCallables.callSuspendBy(KCallables.kt:74)\n\tat org.springframework.core.CoroutinesUtils.lambda$invokeSuspendingFunction$3(CoroutinesUtils.java:146)\n\tat kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$4.invokeSuspend(IntrinsicsJvm.kt:241)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.internal.DispatchedContinuationKt.resumeCancellableWith(DispatchedContinuation.kt:363)\n\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable(Cancellable.kt:26)\n\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable$default(Cancellable.kt:21)\n\tat kotlinx.coroutines.CoroutineStart.invoke(CoroutineStart.kt:88)\n\tat kotlinx.coroutines.AbstractCoroutine.start(AbstractCoroutine.kt:123)\n\tat kotlinx.coroutines.reactor.MonoKt.monoInternal$lambda$2(Mono.kt:88)\n\tat reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:61)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)\n\tat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)\n\tat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)\n\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)\n\tat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)\n\tat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)\n\tat reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)\n\tat reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)\n\tat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)\n\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)\n\tat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)\n\tat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)\n\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\tat reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)\n\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)\n\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:413)\n\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:455)\n\tat reactor.netty.http.server.HttpServerOperations.handleLastHttpContent(HttpServerOperations.java:888)\n\tat reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:797)\n\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:115)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:321)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)\n\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n","traceId":"9d4b20fdbc6547c6b0d287dbc956c575"}
{"@timestamp":"2025-03-23T12:42:54.353943+05:30","@version":"1","message":"Error processing response: Error processing response: Cannot deserialize value of type `java.util.LinkedHashMap<java.lang.String,com.openai.core.JsonValue>` from Boolean value (token `JsonToken.VALUE_FALSE`)\n at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 437] (through reference chain: com.openai.models.ResponseFormatJsonSchema$JsonSchema[\"additionalProperties\"])","logger_name":"com.masaic.openai.api.controller.ExceptionHandler","thread_name":"reactor-http-nio-3","level":"ERROR","level_value":40000,"stack_trace":"com.masaic.openai.api.service.ResponseProcessingException: Error processing response: Cannot deserialize value of type `java.util.LinkedHashMap<java.lang.String,com.openai.core.JsonValue>` from Boolean value (token `JsonToken.VALUE_FALSE`)\n at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 437] (through reference chain: com.openai.models.ResponseFormatJsonSchema$JsonSchema[\"additionalProperties\"])\n\tat com.masaic.openai.api.service.MasaicResponseService.createResponse$suspendImpl(MasaicResponseService.kt:155)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ Handler com.masaic.openai.api.controller.ResponseController#createResponse(CreateResponseRequest, MultiValueMap, MultiValueMap, ServerWebExchange, Continuation) [DispatcherHandler]\nOriginal Stack Trace:\n\t\tat com.masaic.openai.api.service.MasaicResponseService.createResponse$suspendImpl(MasaicResponseService.kt:155)\n\t\tat com.masaic.openai.api.service.MasaicResponseService.createResponse(MasaicResponseService.kt)\n\t\tat com.masaic.openai.api.controller.ResponseController.createResponse$suspendImpl(ResponseController.kt:81)\n\t\tat com.masaic.openai.api.controller.ResponseController.createResponse(ResponseController.kt)\n\t\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\t\tat kotlin.reflect.jvm.internal.calls.CallerImpl$Method.callMethod(CallerImpl.kt:97)\n\t\tat kotlin.reflect.jvm.internal.calls.CallerImpl$Method$Instance.call(CallerImpl.kt:113)\n\t\tat kotlin.reflect.jvm.internal.KCallableImpl.callDefaultMethod$kotlin_reflection(KCallableImpl.kt:207)\n\t\tat kotlin.reflect.full.KCallables.callSuspendBy(KCallables.kt:74)\n\t\tat org.springframework.core.CoroutinesUtils.lambda$invokeSuspendingFunction$3(CoroutinesUtils.java:146)\n\t\tat kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$4.invokeSuspend(IntrinsicsJvm.kt:241)\n\t\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\t\tat kotlinx.coroutines.internal.DispatchedContinuationKt.resumeCancellableWith(DispatchedContinuation.kt:363)\n\t\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable(Cancellable.kt:26)\n\t\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable$default(Cancellable.kt:21)\n\t\tat kotlinx.coroutines.CoroutineStart.invoke(CoroutineStart.kt:88)\n\t\tat kotlinx.coroutines.AbstractCoroutine.start(AbstractCoroutine.kt:123)\n\t\tat kotlinx.coroutines.reactor.MonoKt.monoInternal$lambda$2(Mono.kt:88)\n\t\tat reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:61)\n\t\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)\n\t\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)\n\t\tat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)\n\t\tat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)\n\t\tat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)\n\t\tat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)\n\t\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)\n\t\tat reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)\n\t\tat reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)\n\t\tat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)\n\t\tat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)\n\t\tat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)\n\t\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:413)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:455)\n\t\tat reactor.netty.http.server.HttpServerOperations.handleLastHttpContent(HttpServerOperations.java:888)\n\t\tat reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:797)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:115)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:321)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)\n\t\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\t\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)\n\t\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)\n\t\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)\n\t\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:1583)\n","traceId":"9d4b20fdbc6547c6b0d287dbc956c575"}
{"@timestamp":"2025-03-23T12:42:54.368416+05:30","@version":"1","message":"Request completed - status: 500 INTERNAL_SERVER_ERROR, traceId: 9d4b20fdbc6547c6b0d287dbc956c575, path: /v1/responses","logger_name":"com.masaic.openai.api.config.LoggingConfig","thread_name":"reactor-http-nio-3","level":"INFO","level_value":20000,"traceId":"9d4b20fdbc6547c6b0d287dbc956c575"}
{"@timestamp":"2025-03-23T12:48:08.005019+05:30","@version":"1","message":"HV000001: Hibernate Validator 8.0.2.Final","logger_name":"org.hibernate.validator.internal.util.Version","thread_name":"background-preinit","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:08.044773+05:30","@version":"1","message":"Starting OpenaiApplicationKt using Java 21.0.4 with PID 89190 (/Users/nibha/IdeaProjects/openai/build/classes/kotlin/main started by nibha in /Users/nibha/IdeaProjects/openai)","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:08.045177+05:30","@version":"1","message":"No active profile set, falling back to 1 default profile: \"default\"","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:08.922134+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:09.833054+05:30","@version":"1","message":"MCP StdIO client connected for github server with command: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:09.863726+05:30","@version":"1","message":"Adding tool: McpTool(name='create_or_update_file', description='Create or update a single file in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:09.863871+05:30","@version":"1","message":"Adding tool: McpTool(name='search_repositories', description='Search for GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:09.863918+05:30","@version":"1","message":"Adding tool: McpTool(name='create_repository', description='Create a new GitHub repository in your account', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:09.863956+05:30","@version":"1","message":"Adding tool: McpTool(name='get_file_contents', description='Get the contents of a file or directory from a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:09.863981+05:30","@version":"1","message":"Adding tool: McpTool(name='push_files', description='Push multiple files to a GitHub repository in a single commit', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:09.864016+05:30","@version":"1","message":"Adding tool: McpTool(name='create_issue', description='Create a new issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:09.864083+05:30","@version":"1","message":"Adding tool: McpTool(name='create_pull_request', description='Create a new pull request in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:09.864121+05:30","@version":"1","message":"Adding tool: McpTool(name='fork_repository', description='Fork a GitHub repository to your account or specified organization', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:09.864155+05:30","@version":"1","message":"Adding tool: McpTool(name='create_branch', description='Create a new branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:09.864174+05:30","@version":"1","message":"Adding tool: McpTool(name='list_commits', description='Get list of commits of a branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:09.864206+05:30","@version":"1","message":"Adding tool: McpTool(name='list_issues', description='List issues in a GitHub repository with filtering options', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:09.864242+05:30","@version":"1","message":"Adding tool: McpTool(name='update_issue', description='Update an existing issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:09.864274+05:30","@version":"1","message":"Adding tool: McpTool(name='add_issue_comment', description='Add a comment to an existing issue', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:09.864306+05:30","@version":"1","message":"Adding tool: McpTool(name='search_code', description='Search for code across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:09.864327+05:30","@version":"1","message":"Adding tool: McpTool(name='search_issues', description='Search for issues and pull requests across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:09.864359+05:30","@version":"1","message":"Adding tool: McpTool(name='search_users', description='Search for users on GitHub', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:09.8644+05:30","@version":"1","message":"Adding tool: McpTool(name='get_issue', description='Get details of a specific issue in a GitHub repository.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:09.864445+05:30","@version":"1","message":"Successfully loaded tools for MCP server: github","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:09.864499+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:10.122426+05:30","@version":"1","message":"MCP StdIO client connected for brave-search server with command: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:10.123971+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_web_search', description='Performs a web search using the Brave Search API, ideal for general queries, news, articles, and online content. Use this for broad information gathering, recent events, or when you need diverse web sources. Supports pagination, content filtering, and freshness controls. Maximum 20 results per request, with offset for pagination. ', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:10.124061+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_local_search', description='Searches for local businesses and places using Brave's Local Search API. Best for queries related to physical locations, businesses, restaurants, services, etc. Returns detailed information including:\n- Business names and addresses\n- Ratings and review counts\n- Phone numbers and opening hours\nUse this when the query implies 'near me' or mentions specific locations. Automatically falls back to web search if no local results are found.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:10.124094+05:30","@version":"1","message":"Successfully loaded tools for MCP server: brave-search","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:10.62657+05:30","@version":"1","message":"Started OpenaiApplicationKt in 3.047 seconds (process running for 3.416)","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:50.485605+05:30","@version":"1","message":"Incoming request - method: POST, path: /v1/responses, client: 0:0:0:0:0:0:0:1, traceId: 58cf581effea4782b9eff6fd1076d4eb","logger_name":"com.masaic.openai.api.config.LoggingConfig","thread_name":"reactor-http-nio-3","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:48:50.792475+05:30","@version":"1","message":"Creating response with traceId: 58cf581effea4782b9eff6fd1076d4eb, model: gpt-4o","logger_name":"com.masaic.openai.api.service.MasaicResponseService","thread_name":"reactor-http-nio-3","level":"INFO","level_value":20000,"traceId":"58cf581effea4782b9eff6fd1076d4eb"}
{"@timestamp":"2025-03-23T12:48:50.983679+05:30","@version":"1","message":"Error creating response - traceId: 58cf581effea4782b9eff6fd1076d4eb","logger_name":"com.masaic.openai.api.service.MasaicResponseService","thread_name":"reactor-http-nio-3","level":"ERROR","level_value":40000,"stack_trace":"com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `java.util.LinkedHashMap<java.lang.String,com.openai.core.JsonValue>` from Boolean value (token `JsonToken.VALUE_FALSE`)\n at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 437] (through reference chain: com.openai.models.ResponseFormatJsonSchema$JsonSchema[\"additionalProperties\"])\n\tat com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:59)\n\tat com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1767)\n\tat com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1541)\n\tat com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1488)\n\tat com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:460)\n\tat com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:32)\n\tat com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:543)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithErrorWrapping(BeanDeserializer.java:585)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:447)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1497)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:348)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)\n\tat com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:342)\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4917)\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3860)\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3828)\n\tat com.masaic.openai.api.client.MasaicParameterConverter.applyResponseFormatting(MasaicParameterConverter.kt:294)\n\tat com.masaic.openai.api.client.MasaicParameterConverter.prepareCompletion(MasaicParameterConverter.kt:34)\n\tat com.masaic.openai.api.client.MasaicOpenAiResponseServiceImpl.create(MasaicOpenAiResponseServiceImpl.kt:65)\n\tat com.masaic.openai.api.service.MasaicResponseService$createResponse$3.invokeSuspend(MasaicResponseService.kt:136)\n\tat com.masaic.openai.api.service.MasaicResponseService$createResponse$3.invoke(MasaicResponseService.kt)\n\tat com.masaic.openai.api.service.MasaicResponseService$createResponse$3.invoke(MasaicResponseService.kt)\n\tat kotlinx.coroutines.intrinsics.UndispatchedKt.startUndispatchedOrReturnIgnoreTimeout(Undispatched.kt:72)\n\tat kotlinx.coroutines.TimeoutKt.setupTimeout(Timeout.kt:148)\n\tat kotlinx.coroutines.TimeoutKt.withTimeout(Timeout.kt:43)\n\tat com.masaic.openai.api.service.MasaicResponseService.createResponse$suspendImpl(MasaicResponseService.kt:135)\n\tat com.masaic.openai.api.service.MasaicResponseService.createResponse(MasaicResponseService.kt)\n\tat com.masaic.openai.api.controller.ResponseController$createResponse$2.invokeSuspend(ResponseController.kt:84)\n\tat com.masaic.openai.api.controller.ResponseController$createResponse$2.invoke(ResponseController.kt)\n\tat com.masaic.openai.api.controller.ResponseController$createResponse$2.invoke(ResponseController.kt)\n\tat kotlinx.coroutines.intrinsics.UndispatchedKt.startUndispatchedOrReturn(Undispatched.kt:61)\n\tat kotlinx.coroutines.BuildersKt__Builders_commonKt.withContext(Builders.common.kt:163)\n\tat kotlinx.coroutines.BuildersKt.withContext(Unknown Source)\n\tat com.masaic.openai.api.controller.ResponseController.createResponse$suspendImpl(ResponseController.kt:63)\n\tat com.masaic.openai.api.controller.ResponseController.createResponse(ResponseController.kt)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat kotlin.reflect.jvm.internal.calls.CallerImpl$Method.callMethod(CallerImpl.kt:97)\n\tat kotlin.reflect.jvm.internal.calls.CallerImpl$Method$Instance.call(CallerImpl.kt:113)\n\tat kotlin.reflect.jvm.internal.KCallableImpl.callDefaultMethod$kotlin_reflection(KCallableImpl.kt:207)\n\tat kotlin.reflect.full.KCallables.callSuspendBy(KCallables.kt:74)\n\tat org.springframework.core.CoroutinesUtils.lambda$invokeSuspendingFunction$3(CoroutinesUtils.java:146)\n\tat kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$4.invokeSuspend(IntrinsicsJvm.kt:241)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.internal.DispatchedContinuationKt.resumeCancellableWith(DispatchedContinuation.kt:363)\n\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable(Cancellable.kt:26)\n\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable$default(Cancellable.kt:21)\n\tat kotlinx.coroutines.CoroutineStart.invoke(CoroutineStart.kt:88)\n\tat kotlinx.coroutines.AbstractCoroutine.start(AbstractCoroutine.kt:123)\n\tat kotlinx.coroutines.reactor.MonoKt.monoInternal$lambda$2(Mono.kt:88)\n\tat reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:61)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)\n\tat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)\n\tat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)\n\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)\n\tat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)\n\tat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)\n\tat reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)\n\tat reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)\n\tat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)\n\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)\n\tat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)\n\tat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)\n\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\tat reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)\n\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)\n\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:413)\n\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:455)\n\tat reactor.netty.http.server.HttpServerOperations.handleLastHttpContent(HttpServerOperations.java:888)\n\tat reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:797)\n\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:115)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:321)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)\n\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n","traceId":"58cf581effea4782b9eff6fd1076d4eb"}
{"@timestamp":"2025-03-23T12:48:51.012026+05:30","@version":"1","message":"Error processing response: Error processing response: Cannot deserialize value of type `java.util.LinkedHashMap<java.lang.String,com.openai.core.JsonValue>` from Boolean value (token `JsonToken.VALUE_FALSE`)\n at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 437] (through reference chain: com.openai.models.ResponseFormatJsonSchema$JsonSchema[\"additionalProperties\"])","logger_name":"com.masaic.openai.api.controller.ExceptionHandler","thread_name":"reactor-http-nio-3","level":"ERROR","level_value":40000,"stack_trace":"com.masaic.openai.api.service.ResponseProcessingException: Error processing response: Cannot deserialize value of type `java.util.LinkedHashMap<java.lang.String,com.openai.core.JsonValue>` from Boolean value (token `JsonToken.VALUE_FALSE`)\n at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 437] (through reference chain: com.openai.models.ResponseFormatJsonSchema$JsonSchema[\"additionalProperties\"])\n\tat com.masaic.openai.api.service.MasaicResponseService.createResponse$suspendImpl(MasaicResponseService.kt:155)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ Handler com.masaic.openai.api.controller.ResponseController#createResponse(CreateResponseRequest, MultiValueMap, MultiValueMap, ServerWebExchange, Continuation) [DispatcherHandler]\nOriginal Stack Trace:\n\t\tat com.masaic.openai.api.service.MasaicResponseService.createResponse$suspendImpl(MasaicResponseService.kt:155)\n\t\tat com.masaic.openai.api.service.MasaicResponseService.createResponse(MasaicResponseService.kt)\n\t\tat com.masaic.openai.api.controller.ResponseController$createResponse$2.invokeSuspend(ResponseController.kt:84)\n\t\tat com.masaic.openai.api.controller.ResponseController$createResponse$2.invoke(ResponseController.kt)\n\t\tat com.masaic.openai.api.controller.ResponseController$createResponse$2.invoke(ResponseController.kt)\n\t\tat kotlinx.coroutines.intrinsics.UndispatchedKt.startUndispatchedOrReturn(Undispatched.kt:61)\n\t\tat kotlinx.coroutines.BuildersKt__Builders_commonKt.withContext(Builders.common.kt:163)\n\t\tat kotlinx.coroutines.BuildersKt.withContext(Unknown Source)\n\t\tat com.masaic.openai.api.controller.ResponseController.createResponse$suspendImpl(ResponseController.kt:63)\n\t\tat com.masaic.openai.api.controller.ResponseController.createResponse(ResponseController.kt)\n\t\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\t\tat kotlin.reflect.jvm.internal.calls.CallerImpl$Method.callMethod(CallerImpl.kt:97)\n\t\tat kotlin.reflect.jvm.internal.calls.CallerImpl$Method$Instance.call(CallerImpl.kt:113)\n\t\tat kotlin.reflect.jvm.internal.KCallableImpl.callDefaultMethod$kotlin_reflection(KCallableImpl.kt:207)\n\t\tat kotlin.reflect.full.KCallables.callSuspendBy(KCallables.kt:74)\n\t\tat org.springframework.core.CoroutinesUtils.lambda$invokeSuspendingFunction$3(CoroutinesUtils.java:146)\n\t\tat kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$4.invokeSuspend(IntrinsicsJvm.kt:241)\n\t\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\t\tat kotlinx.coroutines.internal.DispatchedContinuationKt.resumeCancellableWith(DispatchedContinuation.kt:363)\n\t\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable(Cancellable.kt:26)\n\t\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable$default(Cancellable.kt:21)\n\t\tat kotlinx.coroutines.CoroutineStart.invoke(CoroutineStart.kt:88)\n\t\tat kotlinx.coroutines.AbstractCoroutine.start(AbstractCoroutine.kt:123)\n\t\tat kotlinx.coroutines.reactor.MonoKt.monoInternal$lambda$2(Mono.kt:88)\n\t\tat reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:61)\n\t\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)\n\t\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)\n\t\tat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)\n\t\tat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)\n\t\tat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)\n\t\tat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)\n\t\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)\n\t\tat reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)\n\t\tat reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)\n\t\tat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)\n\t\tat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)\n\t\tat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)\n\t\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:413)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:455)\n\t\tat reactor.netty.http.server.HttpServerOperations.handleLastHttpContent(HttpServerOperations.java:888)\n\t\tat reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:797)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:115)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:321)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)\n\t\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\t\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)\n\t\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)\n\t\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)\n\t\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:1583)\n"}
{"@timestamp":"2025-03-23T12:48:51.061797+05:30","@version":"1","message":"Request completed - status: 500 INTERNAL_SERVER_ERROR, traceId: 58cf581effea4782b9eff6fd1076d4eb, path: /v1/responses","logger_name":"com.masaic.openai.api.config.LoggingConfig","thread_name":"reactor-http-nio-3","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:07.416599+05:30","@version":"1","message":"HV000001: Hibernate Validator 8.0.2.Final","logger_name":"org.hibernate.validator.internal.util.Version","thread_name":"background-preinit","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:07.442303+05:30","@version":"1","message":"Starting OpenaiApplicationTests using Java 21.0.4 with PID 89706 (started by nibha in /Users/nibha/IdeaProjects/openai)","logger_name":"com.masaic.openai.OpenaiApplicationTests","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:07.442677+05:30","@version":"1","message":"No active profile set, falling back to 1 default profile: \"default\"","logger_name":"com.masaic.openai.OpenaiApplicationTests","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:08.090357+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:08.666487+05:30","@version":"1","message":"MCP StdIO client connected for github server with command: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:08.689992+05:30","@version":"1","message":"Adding tool: McpTool(name='create_or_update_file', description='Create or update a single file in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:08.690173+05:30","@version":"1","message":"Adding tool: McpTool(name='search_repositories', description='Search for GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:08.690261+05:30","@version":"1","message":"Adding tool: McpTool(name='create_repository', description='Create a new GitHub repository in your account', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:08.690321+05:30","@version":"1","message":"Adding tool: McpTool(name='get_file_contents', description='Get the contents of a file or directory from a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:08.69036+05:30","@version":"1","message":"Adding tool: McpTool(name='push_files', description='Push multiple files to a GitHub repository in a single commit', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:08.69041+05:30","@version":"1","message":"Adding tool: McpTool(name='create_issue', description='Create a new issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:08.690541+05:30","@version":"1","message":"Adding tool: McpTool(name='create_pull_request', description='Create a new pull request in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:08.690626+05:30","@version":"1","message":"Adding tool: McpTool(name='fork_repository', description='Fork a GitHub repository to your account or specified organization', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:08.690688+05:30","@version":"1","message":"Adding tool: McpTool(name='create_branch', description='Create a new branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:08.690727+05:30","@version":"1","message":"Adding tool: McpTool(name='list_commits', description='Get list of commits of a branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:08.690779+05:30","@version":"1","message":"Adding tool: McpTool(name='list_issues', description='List issues in a GitHub repository with filtering options', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:08.690839+05:30","@version":"1","message":"Adding tool: McpTool(name='update_issue', description='Update an existing issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:08.690897+05:30","@version":"1","message":"Adding tool: McpTool(name='add_issue_comment', description='Add a comment to an existing issue', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:08.690947+05:30","@version":"1","message":"Adding tool: McpTool(name='search_code', description='Search for code across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:08.690985+05:30","@version":"1","message":"Adding tool: McpTool(name='search_issues', description='Search for issues and pull requests across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:08.691044+05:30","@version":"1","message":"Adding tool: McpTool(name='search_users', description='Search for users on GitHub', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:08.691141+05:30","@version":"1","message":"Adding tool: McpTool(name='get_issue', description='Get details of a specific issue in a GitHub repository.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:08.691226+05:30","@version":"1","message":"Successfully loaded tools for MCP server: github","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:08.691298+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:08.932453+05:30","@version":"1","message":"MCP StdIO client connected for brave-search server with command: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:08.935343+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_web_search', description='Performs a web search using the Brave Search API, ideal for general queries, news, articles, and online content. Use this for broad information gathering, recent events, or when you need diverse web sources. Supports pagination, content filtering, and freshness controls. Maximum 20 results per request, with offset for pagination. ', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:08.935572+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_local_search', description='Searches for local businesses and places using Brave's Local Search API. Best for queries related to physical locations, businesses, restaurants, services, etc. Returns detailed information including:\n- Business names and addresses\n- Ratings and review counts\n- Phone numbers and opening hours\nUse this when the query implies 'near me' or mentions specific locations. Automatically falls back to web search if no local results are found.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:08.935832+05:30","@version":"1","message":"Successfully loaded tools for MCP server: brave-search","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:09.497541+05:30","@version":"1","message":"Started OpenaiApplicationTests in 2.348 seconds (process running for 3.194)","logger_name":"com.masaic.openai.OpenaiApplicationTests","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:11.495055+05:30","@version":"1","message":"Starting PlaygroundControllerTest using Java 21.0.4 with PID 89706 (started by nibha in /Users/nibha/IdeaProjects/openai)","logger_name":"com.masaic.openai.api.controller.PlaygroundControllerTest","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:11.49524+05:30","@version":"1","message":"No active profile set, falling back to 1 default profile: \"default\"","logger_name":"com.masaic.openai.api.controller.PlaygroundControllerTest","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:11.624532+05:30","@version":"1","message":"Started PlaygroundControllerTest in 0.15 seconds (process running for 5.321)","logger_name":"com.masaic.openai.api.controller.PlaygroundControllerTest","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:11.979644+05:30","@version":"1","message":"Creating response with traceId: unknown, model: unknown","logger_name":"com.masaic.openai.api.service.MasaicResponseService","thread_name":"Test worker @coroutine#18","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:11.984725+05:30","@version":"1","message":"Retrieving response with ID: testResponseId, traceId: unknown","logger_name":"com.masaic.openai.api.service.MasaicResponseService","thread_name":"Test worker @coroutine#19","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:11.987273+05:30","@version":"1","message":"Error retrieving response with ID: testResponseId, traceId: unknown","logger_name":"com.masaic.openai.api.service.MasaicResponseService","thread_name":"Test worker @coroutine#19","level":"ERROR","level_value":40000,"stack_trace":"java.lang.IllegalArgumentException: api-key is missing.\n\tat com.masaic.openai.api.service.MasaicResponseService.getResponse$suspendImpl(MasaicResponseService.kt:248)\n\tat com.masaic.openai.api.service.MasaicResponseService.getResponse(MasaicResponseService.kt)\n\tat com.masaic.openai.api.service.MasaicResponseServiceTest$getResponse should throw IllegalArgumentException if Authorization header is missing$1$1.invokeSuspend(MasaicResponseServiceTest.kt:215)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:277)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:95)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:69)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:48)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.masaic.openai.api.service.MasaicResponseServiceTest.getResponse_should_throw_IllegalArgumentException_if_Authorization_header_is_missing$lambda$1(MasaicResponseServiceTest.kt:214)\n\tat org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:53)\n\tat org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:35)\n\tat org.junit.jupiter.api.Assertions.assertThrows(Assertions.java:3128)\n\tat com.masaic.openai.api.service.MasaicResponseServiceTest.getResponse should throw IllegalArgumentException if Authorization header is missing(MasaicResponseServiceTest.kt:213)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:767)\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$8(TestMethodTestDescriptor.java:217)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)\n\tat org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:124)\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:99)\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:94)\n\tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:63)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n\tat org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)\n\tat org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:92)\n\tat jdk.proxy1/jdk.proxy1.$Proxy4.stop(Unknown Source)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:200)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:132)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:103)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:63)\n\tat org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)\n\tat org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:121)\n\tat org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)\n\tat worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)\n\tat worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)\n"}
{"@timestamp":"2025-03-23T12:51:12.017602+05:30","@version":"1","message":"Creating response with traceId: unknown, model: unknown","logger_name":"com.masaic.openai.api.service.MasaicResponseService","thread_name":"Test worker @coroutine#20","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:12.176968+05:30","@version":"1","message":"Creating streaming response with traceId: unknown, model: unknown","logger_name":"com.masaic.openai.api.service.MasaicResponseService","thread_name":"Test worker @coroutine#21","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:12.204913+05:30","@version":"1","message":"Creating streaming response with traceId: unknown, model: unknown","logger_name":"com.masaic.openai.api.service.MasaicResponseService","thread_name":"Test worker @coroutine#22","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:12.209378+05:30","@version":"1","message":"Stream completed successfully - traceId: unknown","logger_name":"com.masaic.openai.api.service.MasaicResponseService","thread_name":"Test worker @coroutine#22","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.257772+05:30","@version":"1","message":"Starting ToolIntegrationTest using Java 21.0.4 with PID 89706 (started by nibha in /Users/nibha/IdeaProjects/openai)","logger_name":"com.masaic.openai.tool.ToolIntegrationTest","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.257986+05:30","@version":"1","message":"The following 1 profile is active: \"test\"","logger_name":"com.masaic.openai.tool.ToolIntegrationTest","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.413115+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.704861+05:30","@version":"1","message":"MCP StdIO client connected for github server with command: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.709455+05:30","@version":"1","message":"Adding tool: McpTool(name='create_or_update_file', description='Create or update a single file in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.709577+05:30","@version":"1","message":"Adding tool: McpTool(name='search_repositories', description='Search for GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.709615+05:30","@version":"1","message":"Adding tool: McpTool(name='create_repository', description='Create a new GitHub repository in your account', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.709662+05:30","@version":"1","message":"Adding tool: McpTool(name='get_file_contents', description='Get the contents of a file or directory from a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.709719+05:30","@version":"1","message":"Adding tool: McpTool(name='push_files', description='Push multiple files to a GitHub repository in a single commit', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.709761+05:30","@version":"1","message":"Adding tool: McpTool(name='create_issue', description='Create a new issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.709812+05:30","@version":"1","message":"Adding tool: McpTool(name='create_pull_request', description='Create a new pull request in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.709847+05:30","@version":"1","message":"Adding tool: McpTool(name='fork_repository', description='Fork a GitHub repository to your account or specified organization', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.709898+05:30","@version":"1","message":"Adding tool: McpTool(name='create_branch', description='Create a new branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.709942+05:30","@version":"1","message":"Adding tool: McpTool(name='list_commits', description='Get list of commits of a branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.709985+05:30","@version":"1","message":"Adding tool: McpTool(name='list_issues', description='List issues in a GitHub repository with filtering options', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.710031+05:30","@version":"1","message":"Adding tool: McpTool(name='update_issue', description='Update an existing issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.710089+05:30","@version":"1","message":"Adding tool: McpTool(name='add_issue_comment', description='Add a comment to an existing issue', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.710136+05:30","@version":"1","message":"Adding tool: McpTool(name='search_code', description='Search for code across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.710187+05:30","@version":"1","message":"Adding tool: McpTool(name='search_issues', description='Search for issues and pull requests across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.710237+05:30","@version":"1","message":"Adding tool: McpTool(name='search_users', description='Search for users on GitHub', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.710286+05:30","@version":"1","message":"Adding tool: McpTool(name='get_issue', description='Get details of a specific issue in a GitHub repository.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.710438+05:30","@version":"1","message":"Successfully loaded tools for MCP server: github","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.710491+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.885512+05:30","@version":"1","message":"MCP StdIO client connected for brave-search server with command: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.888165+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_web_search', description='Performs a web search using the Brave Search API, ideal for general queries, news, articles, and online content. Use this for broad information gathering, recent events, or when you need diverse web sources. Supports pagination, content filtering, and freshness controls. Maximum 20 results per request, with offset for pagination. ', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.888334+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_local_search', description='Searches for local businesses and places using Brave's Local Search API. Best for queries related to physical locations, businesses, restaurants, services, etc. Returns detailed information including:\n- Business names and addresses\n- Ratings and review counts\n- Phone numbers and opening hours\nUse this when the query implies 'near me' or mentions specific locations. Automatically falls back to web search if no local results are found.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:12.88851+05:30","@version":"1","message":"Successfully loaded tools for MCP server: brave-search","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:13.127967+05:30","@version":"1","message":"Started ToolIntegrationTest in 0.907 seconds (process running for 6.824)","logger_name":"com.masaic.openai.tool.ToolIntegrationTest","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:51:13.133299+05:30","@version":"1","message":"Incoming request - method: GET, path: /v1/tools, client: unknown, traceId: 7960a27fd43846ee85e94213dbd9930f","logger_name":"com.masaic.openai.api.config.LoggingConfig","thread_name":"parallel-3","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:51:13.137155+05:30","@version":"1","message":"Request completed - status: 200 OK, traceId: 7960a27fd43846ee85e94213dbd9930f, path: /v1/tools","logger_name":"com.masaic.openai.api.config.LoggingConfig","thread_name":"parallel-3","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:52:00.536157+05:30","@version":"1","message":"Starting OpenaiApplicationTests using Java 21.0.4 with PID 89862 (started by nibha in /Users/nibha/IdeaProjects/openai)","logger_name":"com.masaic.openai.OpenaiApplicationTests","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:00.537034+05:30","@version":"1","message":"No active profile set, falling back to 1 default profile: \"default\"","logger_name":"com.masaic.openai.OpenaiApplicationTests","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:00.537936+05:30","@version":"1","message":"HV000001: Hibernate Validator 8.0.2.Final","logger_name":"org.hibernate.validator.internal.util.Version","thread_name":"background-preinit","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:52:01.039158+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:01.370362+05:30","@version":"1","message":"MCP StdIO client connected for github server with command: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:01.38468+05:30","@version":"1","message":"Adding tool: McpTool(name='create_or_update_file', description='Create or update a single file in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:01.384861+05:30","@version":"1","message":"Adding tool: McpTool(name='search_repositories', description='Search for GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:01.384922+05:30","@version":"1","message":"Adding tool: McpTool(name='create_repository', description='Create a new GitHub repository in your account', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:01.384972+05:30","@version":"1","message":"Adding tool: McpTool(name='get_file_contents', description='Get the contents of a file or directory from a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:01.385026+05:30","@version":"1","message":"Adding tool: McpTool(name='push_files', description='Push multiple files to a GitHub repository in a single commit', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:01.385323+05:30","@version":"1","message":"Adding tool: McpTool(name='create_issue', description='Create a new issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:01.385455+05:30","@version":"1","message":"Adding tool: McpTool(name='create_pull_request', description='Create a new pull request in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:01.385575+05:30","@version":"1","message":"Adding tool: McpTool(name='fork_repository', description='Fork a GitHub repository to your account or specified organization', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:01.385657+05:30","@version":"1","message":"Adding tool: McpTool(name='create_branch', description='Create a new branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:01.385719+05:30","@version":"1","message":"Adding tool: McpTool(name='list_commits', description='Get list of commits of a branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:01.385759+05:30","@version":"1","message":"Adding tool: McpTool(name='list_issues', description='List issues in a GitHub repository with filtering options', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:01.385806+05:30","@version":"1","message":"Adding tool: McpTool(name='update_issue', description='Update an existing issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:01.385882+05:30","@version":"1","message":"Adding tool: McpTool(name='add_issue_comment', description='Add a comment to an existing issue', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:01.385937+05:30","@version":"1","message":"Adding tool: McpTool(name='search_code', description='Search for code across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:01.385985+05:30","@version":"1","message":"Adding tool: McpTool(name='search_issues', description='Search for issues and pull requests across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:01.386019+05:30","@version":"1","message":"Adding tool: McpTool(name='search_users', description='Search for users on GitHub', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:01.386103+05:30","@version":"1","message":"Adding tool: McpTool(name='get_issue', description='Get details of a specific issue in a GitHub repository.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:01.386179+05:30","@version":"1","message":"Successfully loaded tools for MCP server: github","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:01.386241+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:01.534747+05:30","@version":"1","message":"MCP StdIO client connected for brave-search server with command: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:01.536614+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_web_search', description='Performs a web search using the Brave Search API, ideal for general queries, news, articles, and online content. Use this for broad information gathering, recent events, or when you need diverse web sources. Supports pagination, content filtering, and freshness controls. Maximum 20 results per request, with offset for pagination. ', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:01.536932+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_local_search', description='Searches for local businesses and places using Brave's Local Search API. Best for queries related to physical locations, businesses, restaurants, services, etc. Returns detailed information including:\n- Business names and addresses\n- Ratings and review counts\n- Phone numbers and opening hours\nUse this when the query implies 'near me' or mentions specific locations. Automatically falls back to web search if no local results are found.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:01.537181+05:30","@version":"1","message":"Successfully loaded tools for MCP server: brave-search","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:02.047131+05:30","@version":"1","message":"Started OpenaiApplicationTests in 1.664 seconds (process running for 3.626)","logger_name":"com.masaic.openai.OpenaiApplicationTests","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.021427+05:30","@version":"1","message":"Starting PlaygroundControllerTest using Java 21.0.4 with PID 89862 (started by nibha in /Users/nibha/IdeaProjects/openai)","logger_name":"com.masaic.openai.api.controller.PlaygroundControllerTest","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.02165+05:30","@version":"1","message":"No active profile set, falling back to 1 default profile: \"default\"","logger_name":"com.masaic.openai.api.controller.PlaygroundControllerTest","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.110935+05:30","@version":"1","message":"Started PlaygroundControllerTest in 0.099 seconds (process running for 4.69)","logger_name":"com.masaic.openai.api.controller.PlaygroundControllerTest","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.39579+05:30","@version":"1","message":"Starting ToolIntegrationTest using Java 21.0.4 with PID 89862 (started by nibha in /Users/nibha/IdeaProjects/openai)","logger_name":"com.masaic.openai.tool.ToolIntegrationTest","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.39599+05:30","@version":"1","message":"The following 1 profile is active: \"test\"","logger_name":"com.masaic.openai.tool.ToolIntegrationTest","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.515254+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.747612+05:30","@version":"1","message":"MCP StdIO client connected for github server with command: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.751552+05:30","@version":"1","message":"Adding tool: McpTool(name='create_or_update_file', description='Create or update a single file in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.751658+05:30","@version":"1","message":"Adding tool: McpTool(name='search_repositories', description='Search for GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.751693+05:30","@version":"1","message":"Adding tool: McpTool(name='create_repository', description='Create a new GitHub repository in your account', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.751738+05:30","@version":"1","message":"Adding tool: McpTool(name='get_file_contents', description='Get the contents of a file or directory from a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.751785+05:30","@version":"1","message":"Adding tool: McpTool(name='push_files', description='Push multiple files to a GitHub repository in a single commit', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.751831+05:30","@version":"1","message":"Adding tool: McpTool(name='create_issue', description='Create a new issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.751875+05:30","@version":"1","message":"Adding tool: McpTool(name='create_pull_request', description='Create a new pull request in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.751912+05:30","@version":"1","message":"Adding tool: McpTool(name='fork_repository', description='Fork a GitHub repository to your account or specified organization', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.751962+05:30","@version":"1","message":"Adding tool: McpTool(name='create_branch', description='Create a new branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.752008+05:30","@version":"1","message":"Adding tool: McpTool(name='list_commits', description='Get list of commits of a branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.752066+05:30","@version":"1","message":"Adding tool: McpTool(name='list_issues', description='List issues in a GitHub repository with filtering options', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.752116+05:30","@version":"1","message":"Adding tool: McpTool(name='update_issue', description='Update an existing issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.752144+05:30","@version":"1","message":"Adding tool: McpTool(name='add_issue_comment', description='Add a comment to an existing issue', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.752183+05:30","@version":"1","message":"Adding tool: McpTool(name='search_code', description='Search for code across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.752225+05:30","@version":"1","message":"Adding tool: McpTool(name='search_issues', description='Search for issues and pull requests across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.752271+05:30","@version":"1","message":"Adding tool: McpTool(name='search_users', description='Search for users on GitHub', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.752314+05:30","@version":"1","message":"Adding tool: McpTool(name='get_issue', description='Get details of a specific issue in a GitHub repository.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.752337+05:30","@version":"1","message":"Successfully loaded tools for MCP server: github","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.75238+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.891822+05:30","@version":"1","message":"MCP StdIO client connected for brave-search server with command: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.89316+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_web_search', description='Performs a web search using the Brave Search API, ideal for general queries, news, articles, and online content. Use this for broad information gathering, recent events, or when you need diverse web sources. Supports pagination, content filtering, and freshness controls. Maximum 20 results per request, with offset for pagination. ', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.893277+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_local_search', description='Searches for local businesses and places using Brave's Local Search API. Best for queries related to physical locations, businesses, restaurants, services, etc. Returns detailed information including:\n- Business names and addresses\n- Ratings and review counts\n- Phone numbers and opening hours\nUse this when the query implies 'near me' or mentions specific locations. Automatically falls back to web search if no local results are found.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:03.893334+05:30","@version":"1","message":"Successfully loaded tools for MCP server: brave-search","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:04.108415+05:30","@version":"1","message":"Started ToolIntegrationTest in 0.745 seconds (process running for 5.687)","logger_name":"com.masaic.openai.tool.ToolIntegrationTest","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:52:04.113572+05:30","@version":"1","message":"Incoming request - method: GET, path: /v1/tools, client: unknown, traceId: b38dda7a120d4a7a9790fbea5dade678","logger_name":"com.masaic.openai.api.config.LoggingConfig","thread_name":"parallel-3","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:52:04.116456+05:30","@version":"1","message":"Request completed - status: 200 OK, traceId: b38dda7a120d4a7a9790fbea5dade678, path: /v1/tools","logger_name":"com.masaic.openai.api.config.LoggingConfig","thread_name":"parallel-3","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:50.542211+05:30","@version":"1","message":"HV000001: Hibernate Validator 8.0.2.Final","logger_name":"org.hibernate.validator.internal.util.Version","thread_name":"background-preinit","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:50.557404+05:30","@version":"1","message":"Starting OpenaiApplicationTests using Java 21.0.4 with PID 90238 (started by nibha in /Users/nibha/IdeaProjects/openai)","logger_name":"com.masaic.openai.OpenaiApplicationTests","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:50.558753+05:30","@version":"1","message":"No active profile set, falling back to 1 default profile: \"default\"","logger_name":"com.masaic.openai.OpenaiApplicationTests","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:51.088304+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:51.512455+05:30","@version":"1","message":"MCP StdIO client connected for github server with command: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:51.525952+05:30","@version":"1","message":"Adding tool: McpTool(name='create_or_update_file', description='Create or update a single file in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:51.526131+05:30","@version":"1","message":"Adding tool: McpTool(name='search_repositories', description='Search for GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:51.52621+05:30","@version":"1","message":"Adding tool: McpTool(name='create_repository', description='Create a new GitHub repository in your account', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:51.526268+05:30","@version":"1","message":"Adding tool: McpTool(name='get_file_contents', description='Get the contents of a file or directory from a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:51.526319+05:30","@version":"1","message":"Adding tool: McpTool(name='push_files', description='Push multiple files to a GitHub repository in a single commit', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:51.52637+05:30","@version":"1","message":"Adding tool: McpTool(name='create_issue', description='Create a new issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:51.526419+05:30","@version":"1","message":"Adding tool: McpTool(name='create_pull_request', description='Create a new pull request in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:51.526471+05:30","@version":"1","message":"Adding tool: McpTool(name='fork_repository', description='Fork a GitHub repository to your account or specified organization', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:51.526523+05:30","@version":"1","message":"Adding tool: McpTool(name='create_branch', description='Create a new branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:51.526567+05:30","@version":"1","message":"Adding tool: McpTool(name='list_commits', description='Get list of commits of a branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:51.526618+05:30","@version":"1","message":"Adding tool: McpTool(name='list_issues', description='List issues in a GitHub repository with filtering options', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:51.526668+05:30","@version":"1","message":"Adding tool: McpTool(name='update_issue', description='Update an existing issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:51.526725+05:30","@version":"1","message":"Adding tool: McpTool(name='add_issue_comment', description='Add a comment to an existing issue', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:51.526777+05:30","@version":"1","message":"Adding tool: McpTool(name='search_code', description='Search for code across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:51.526813+05:30","@version":"1","message":"Adding tool: McpTool(name='search_issues', description='Search for issues and pull requests across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:51.526867+05:30","@version":"1","message":"Adding tool: McpTool(name='search_users', description='Search for users on GitHub', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:51.526929+05:30","@version":"1","message":"Adding tool: McpTool(name='get_issue', description='Get details of a specific issue in a GitHub repository.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:51.526999+05:30","@version":"1","message":"Successfully loaded tools for MCP server: github","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:51.52707+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:51.690225+05:30","@version":"1","message":"MCP StdIO client connected for brave-search server with command: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:51.691801+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_web_search', description='Performs a web search using the Brave Search API, ideal for general queries, news, articles, and online content. Use this for broad information gathering, recent events, or when you need diverse web sources. Supports pagination, content filtering, and freshness controls. Maximum 20 results per request, with offset for pagination. ', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:51.692056+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_local_search', description='Searches for local businesses and places using Brave's Local Search API. Best for queries related to physical locations, businesses, restaurants, services, etc. Returns detailed information including:\n- Business names and addresses\n- Ratings and review counts\n- Phone numbers and opening hours\nUse this when the query implies 'near me' or mentions specific locations. Automatically falls back to web search if no local results are found.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:51.69232+05:30","@version":"1","message":"Successfully loaded tools for MCP server: brave-search","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:52.189296+05:30","@version":"1","message":"Started OpenaiApplicationTests in 1.889 seconds (process running for 2.776)","logger_name":"com.masaic.openai.OpenaiApplicationTests","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:54.017065+05:30","@version":"1","message":"Starting PlaygroundControllerTest using Java 21.0.4 with PID 90238 (started by nibha in /Users/nibha/IdeaProjects/openai)","logger_name":"com.masaic.openai.api.controller.PlaygroundControllerTest","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:54.017245+05:30","@version":"1","message":"No active profile set, falling back to 1 default profile: \"default\"","logger_name":"com.masaic.openai.api.controller.PlaygroundControllerTest","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:54.169697+05:30","@version":"1","message":"Started PlaygroundControllerTest in 0.171 seconds (process running for 4.757)","logger_name":"com.masaic.openai.api.controller.PlaygroundControllerTest","thread_name":"Test worker","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:54.531308+05:30","@version":"1","message":"Creating response with traceId: unknown, model: unknown","logger_name":"com.masaic.openai.api.service.MasaicResponseService","thread_name":"Test worker @coroutine#18","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:54.535497+05:30","@version":"1","message":"Retrieving response with ID: testResponseId, traceId: unknown","logger_name":"com.masaic.openai.api.service.MasaicResponseService","thread_name":"Test worker @coroutine#19","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:54.537679+05:30","@version":"1","message":"Error retrieving response with ID: testResponseId, traceId: unknown","logger_name":"com.masaic.openai.api.service.MasaicResponseService","thread_name":"Test worker @coroutine#19","level":"ERROR","level_value":40000,"stack_trace":"java.lang.IllegalArgumentException: api-key is missing.\n\tat com.masaic.openai.api.service.MasaicResponseService.getResponse$suspendImpl(MasaicResponseService.kt:248)\n\tat com.masaic.openai.api.service.MasaicResponseService.getResponse(MasaicResponseService.kt)\n\tat com.masaic.openai.api.service.MasaicResponseServiceTest$getResponse should throw IllegalArgumentException if Authorization header is missing$1$1.invokeSuspend(MasaicResponseServiceTest.kt:215)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:277)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:95)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:69)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:48)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.masaic.openai.api.service.MasaicResponseServiceTest.getResponse_should_throw_IllegalArgumentException_if_Authorization_header_is_missing$lambda$1(MasaicResponseServiceTest.kt:214)\n\tat org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:53)\n\tat org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:35)\n\tat org.junit.jupiter.api.Assertions.assertThrows(Assertions.java:3128)\n\tat com.masaic.openai.api.service.MasaicResponseServiceTest.getResponse should throw IllegalArgumentException if Authorization header is missing(MasaicResponseServiceTest.kt:213)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:767)\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$8(TestMethodTestDescriptor.java:217)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)\n\tat org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:124)\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:99)\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:94)\n\tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:63)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n\tat org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)\n\tat org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:92)\n\tat jdk.proxy1/jdk.proxy1.$Proxy4.stop(Unknown Source)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:200)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:132)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:103)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:63)\n\tat org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)\n\tat org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:121)\n\tat org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)\n\tat worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)\n\tat worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)\n"}
{"@timestamp":"2025-03-23T12:53:54.554659+05:30","@version":"1","message":"Creating response with traceId: unknown, model: unknown","logger_name":"com.masaic.openai.api.service.MasaicResponseService","thread_name":"Test worker @coroutine#20","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:54.685845+05:30","@version":"1","message":"Creating streaming response with traceId: unknown, model: unknown","logger_name":"com.masaic.openai.api.service.MasaicResponseService","thread_name":"Test worker @coroutine#21","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:54.714199+05:30","@version":"1","message":"Creating streaming response with traceId: unknown, model: unknown","logger_name":"com.masaic.openai.api.service.MasaicResponseService","thread_name":"Test worker @coroutine#22","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:54.718684+05:30","@version":"1","message":"Stream completed successfully - traceId: unknown","logger_name":"com.masaic.openai.api.service.MasaicResponseService","thread_name":"Test worker @coroutine#22","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:54.768041+05:30","@version":"1","message":"Starting ToolIntegrationTest using Java 21.0.4 with PID 90238 (started by nibha in /Users/nibha/IdeaProjects/openai)","logger_name":"com.masaic.openai.tool.ToolIntegrationTest","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:54.768243+05:30","@version":"1","message":"The following 1 profile is active: \"test\"","logger_name":"com.masaic.openai.tool.ToolIntegrationTest","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:54.920964+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.234454+05:30","@version":"1","message":"MCP StdIO client connected for github server with command: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.23933+05:30","@version":"1","message":"Adding tool: McpTool(name='create_or_update_file', description='Create or update a single file in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.239454+05:30","@version":"1","message":"Adding tool: McpTool(name='search_repositories', description='Search for GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.239491+05:30","@version":"1","message":"Adding tool: McpTool(name='create_repository', description='Create a new GitHub repository in your account', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.239538+05:30","@version":"1","message":"Adding tool: McpTool(name='get_file_contents', description='Get the contents of a file or directory from a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.239585+05:30","@version":"1","message":"Adding tool: McpTool(name='push_files', description='Push multiple files to a GitHub repository in a single commit', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.23963+05:30","@version":"1","message":"Adding tool: McpTool(name='create_issue', description='Create a new issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.23968+05:30","@version":"1","message":"Adding tool: McpTool(name='create_pull_request', description='Create a new pull request in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.239716+05:30","@version":"1","message":"Adding tool: McpTool(name='fork_repository', description='Fork a GitHub repository to your account or specified organization', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.239764+05:30","@version":"1","message":"Adding tool: McpTool(name='create_branch', description='Create a new branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.239821+05:30","@version":"1","message":"Adding tool: McpTool(name='list_commits', description='Get list of commits of a branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.24001+05:30","@version":"1","message":"Adding tool: McpTool(name='list_issues', description='List issues in a GitHub repository with filtering options', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.240153+05:30","@version":"1","message":"Adding tool: McpTool(name='update_issue', description='Update an existing issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.240193+05:30","@version":"1","message":"Adding tool: McpTool(name='add_issue_comment', description='Add a comment to an existing issue', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.240243+05:30","@version":"1","message":"Adding tool: McpTool(name='search_code', description='Search for code across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.24029+05:30","@version":"1","message":"Adding tool: McpTool(name='search_issues', description='Search for issues and pull requests across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.240346+05:30","@version":"1","message":"Adding tool: McpTool(name='search_users', description='Search for users on GitHub', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.240398+05:30","@version":"1","message":"Adding tool: McpTool(name='get_issue', description='Get details of a specific issue in a GitHub repository.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.240547+05:30","@version":"1","message":"Successfully loaded tools for MCP server: github","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.240609+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.395353+05:30","@version":"1","message":"MCP StdIO client connected for brave-search server with command: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.396902+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_web_search', description='Performs a web search using the Brave Search API, ideal for general queries, news, articles, and online content. Use this for broad information gathering, recent events, or when you need diverse web sources. Supports pagination, content filtering, and freshness controls. Maximum 20 results per request, with offset for pagination. ', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.397055+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_local_search', description='Searches for local businesses and places using Brave's Local Search API. Best for queries related to physical locations, businesses, restaurants, services, etc. Returns detailed information including:\n- Business names and addresses\n- Ratings and review counts\n- Phone numbers and opening hours\nUse this when the query implies 'near me' or mentions specific locations. Automatically falls back to web search if no local results are found.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.397134+05:30","@version":"1","message":"Successfully loaded tools for MCP server: brave-search","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.686364+05:30","@version":"1","message":"[63918e52] Unknown channel option 'TCP_NODELAY' for channel '[id: 0x63918e52]'","logger_name":"reactor.netty.transport.TransportConnector","thread_name":"Test worker","level":"WARN","level_value":30000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.703035+05:30","@version":"1","message":"Started ToolIntegrationTest in 0.971 seconds (process running for 6.29)","logger_name":"com.masaic.openai.tool.ToolIntegrationTest","thread_name":"Test worker","level":"INFO","level_value":20000,"traceId":"unknown"}
{"@timestamp":"2025-03-23T12:53:55.716841+05:30","@version":"1","message":"Incoming request - method: GET, path: /v1/tools, client: unknown, traceId: a4cd53e70a2d492789b65d3bcbd73427","logger_name":"com.masaic.openai.api.config.LoggingConfig","thread_name":"parallel-3","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:53:55.721948+05:30","@version":"1","message":"Request completed - status: 200 OK, traceId: a4cd53e70a2d492789b65d3bcbd73427, path: /v1/tools","logger_name":"com.masaic.openai.api.config.LoggingConfig","thread_name":"parallel-3","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:05.078435+05:30","@version":"1","message":"HV000001: Hibernate Validator 8.0.2.Final","logger_name":"org.hibernate.validator.internal.util.Version","thread_name":"background-preinit","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:05.101489+05:30","@version":"1","message":"Starting OpenaiApplicationKt using Java 21.0.4 with PID 90295 (/Users/nibha/IdeaProjects/openai/build/classes/kotlin/main started by nibha in /Users/nibha/IdeaProjects/openai)","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:05.101859+05:30","@version":"1","message":"No active profile set, falling back to 1 default profile: \"default\"","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:05.837423+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:06.180568+05:30","@version":"1","message":"MCP StdIO client connected for github server with command: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:06.208825+05:30","@version":"1","message":"Adding tool: McpTool(name='create_or_update_file', description='Create or update a single file in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:06.208966+05:30","@version":"1","message":"Adding tool: McpTool(name='search_repositories', description='Search for GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:06.209015+05:30","@version":"1","message":"Adding tool: McpTool(name='create_repository', description='Create a new GitHub repository in your account', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:06.209076+05:30","@version":"1","message":"Adding tool: McpTool(name='get_file_contents', description='Get the contents of a file or directory from a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:06.209102+05:30","@version":"1","message":"Adding tool: McpTool(name='push_files', description='Push multiple files to a GitHub repository in a single commit', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:06.209143+05:30","@version":"1","message":"Adding tool: McpTool(name='create_issue', description='Create a new issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:06.209181+05:30","@version":"1","message":"Adding tool: McpTool(name='create_pull_request', description='Create a new pull request in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:06.209214+05:30","@version":"1","message":"Adding tool: McpTool(name='fork_repository', description='Fork a GitHub repository to your account or specified organization', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:06.209246+05:30","@version":"1","message":"Adding tool: McpTool(name='create_branch', description='Create a new branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:06.209265+05:30","@version":"1","message":"Adding tool: McpTool(name='list_commits', description='Get list of commits of a branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:06.209296+05:30","@version":"1","message":"Adding tool: McpTool(name='list_issues', description='List issues in a GitHub repository with filtering options', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:06.209328+05:30","@version":"1","message":"Adding tool: McpTool(name='update_issue', description='Update an existing issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:06.209359+05:30","@version":"1","message":"Adding tool: McpTool(name='add_issue_comment', description='Add a comment to an existing issue', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:06.209389+05:30","@version":"1","message":"Adding tool: McpTool(name='search_code', description='Search for code across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:06.209409+05:30","@version":"1","message":"Adding tool: McpTool(name='search_issues', description='Search for issues and pull requests across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:06.20944+05:30","@version":"1","message":"Adding tool: McpTool(name='search_users', description='Search for users on GitHub', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:06.209477+05:30","@version":"1","message":"Adding tool: McpTool(name='get_issue', description='Get details of a specific issue in a GitHub repository.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:06.209523+05:30","@version":"1","message":"Successfully loaded tools for MCP server: github","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:06.209572+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:06.374501+05:30","@version":"1","message":"MCP StdIO client connected for brave-search server with command: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:06.376521+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_web_search', description='Performs a web search using the Brave Search API, ideal for general queries, news, articles, and online content. Use this for broad information gathering, recent events, or when you need diverse web sources. Supports pagination, content filtering, and freshness controls. Maximum 20 results per request, with offset for pagination. ', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:06.376628+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_local_search', description='Searches for local businesses and places using Brave's Local Search API. Best for queries related to physical locations, businesses, restaurants, services, etc. Returns detailed information including:\n- Business names and addresses\n- Ratings and review counts\n- Phone numbers and opening hours\nUse this when the query implies 'near me' or mentions specific locations. Automatically falls back to web search if no local results are found.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:06.376652+05:30","@version":"1","message":"Successfully loaded tools for MCP server: brave-search","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:54:06.82439+05:30","@version":"1","message":"[00338342] Unknown channel option 'TCP_NODELAY' for channel '[id: 0x00338342]'","logger_name":"reactor.netty.transport.TransportConnector","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-03-23T12:54:06.836494+05:30","@version":"1","message":"Started OpenaiApplicationKt in 2.039 seconds (process running for 2.259)","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:37.385802+05:30","@version":"1","message":"HV000001: Hibernate Validator 8.0.2.Final","logger_name":"org.hibernate.validator.internal.util.Version","thread_name":"background-preinit","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:37.4136+05:30","@version":"1","message":"Starting OpenaiApplicationKt using Java 21.0.4 with PID 91002 (/Users/nibha/IdeaProjects/openai/build/classes/kotlin/main started by nibha in /Users/nibha/IdeaProjects/openai)","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:37.413966+05:30","@version":"1","message":"No active profile set, falling back to 1 default profile: \"default\"","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:38.156295+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:38.489194+05:30","@version":"1","message":"MCP StdIO client connected for github server with command: docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=GITHUB_TOKEN mcp/github 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:38.5219+05:30","@version":"1","message":"Adding tool: McpTool(name='create_or_update_file', description='Create or update a single file in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:38.522076+05:30","@version":"1","message":"Adding tool: McpTool(name='search_repositories', description='Search for GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:38.522152+05:30","@version":"1","message":"Adding tool: McpTool(name='create_repository', description='Create a new GitHub repository in your account', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:38.522191+05:30","@version":"1","message":"Adding tool: McpTool(name='get_file_contents', description='Get the contents of a file or directory from a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:38.522216+05:30","@version":"1","message":"Adding tool: McpTool(name='push_files', description='Push multiple files to a GitHub repository in a single commit', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:38.522255+05:30","@version":"1","message":"Adding tool: McpTool(name='create_issue', description='Create a new issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:38.522292+05:30","@version":"1","message":"Adding tool: McpTool(name='create_pull_request', description='Create a new pull request in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:38.522335+05:30","@version":"1","message":"Adding tool: McpTool(name='fork_repository', description='Fork a GitHub repository to your account or specified organization', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:38.522371+05:30","@version":"1","message":"Adding tool: McpTool(name='create_branch', description='Create a new branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:38.522392+05:30","@version":"1","message":"Adding tool: McpTool(name='list_commits', description='Get list of commits of a branch in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:38.522426+05:30","@version":"1","message":"Adding tool: McpTool(name='list_issues', description='List issues in a GitHub repository with filtering options', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:38.522461+05:30","@version":"1","message":"Adding tool: McpTool(name='update_issue', description='Update an existing issue in a GitHub repository', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:38.522499+05:30","@version":"1","message":"Adding tool: McpTool(name='add_issue_comment', description='Add a comment to an existing issue', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:38.522617+05:30","@version":"1","message":"Adding tool: McpTool(name='search_code', description='Search for code across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:38.522717+05:30","@version":"1","message":"Adding tool: McpTool(name='search_issues', description='Search for issues and pull requests across GitHub repositories', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:38.52292+05:30","@version":"1","message":"Adding tool: McpTool(name='search_users', description='Search for users on GitHub', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:38.523028+05:30","@version":"1","message":"Adding tool: McpTool(name='get_issue', description='Get details of a specific issue in a GitHub repository.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:38.523131+05:30","@version":"1","message":"Successfully loaded tools for MCP server: github","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:38.523181+05:30","@version":"1","message":"Command to start server will be: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:38.684935+05:30","@version":"1","message":"MCP StdIO client connected for brave-search server with command: docker run -i --rm -e BRAVE_API_KEY=BSA0Z9aM-ilAyKdLmG32_N9QQQ8ifwr mcp/brave-search 2>&1","logger_name":"com.masaic.openai.tool.mcp.MCPToolExecutor","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:38.686588+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_web_search', description='Performs a web search using the Brave Search API, ideal for general queries, news, articles, and online content. Use this for broad information gathering, recent events, or when you need diverse web sources. Supports pagination, content filtering, and freshness controls. Maximum 20 results per request, with offset for pagination. ', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:38.6868+05:30","@version":"1","message":"Adding tool: McpTool(name='brave_local_search', description='Searches for local businesses and places using Brave's Local Search API. Best for queries related to physical locations, businesses, restaurants, services, etc. Returns detailed information including:\n- Business names and addresses\n- Ratings and review counts\n- Phone numbers and opening hours\nUse this when the query implies 'near me' or mentions specific locations. Automatically falls back to web search if no local results are found.', protocol=MCP, parametersType=JsonObjectSchema)","logger_name":"com.masaic.openai.tool.mcp.MCPToolRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:38.686874+05:30","@version":"1","message":"Successfully loaded tools for MCP server: brave-search","logger_name":"com.masaic.openai.tool.ToolService","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:58:39.15198+05:30","@version":"1","message":"Started OpenaiApplicationKt in 2.101 seconds (process running for 2.377)","logger_name":"com.masaic.openai.OpenaiApplicationKt","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:59:09.545934+05:30","@version":"1","message":"Incoming request - method: POST, path: /v1/responses, client: 0:0:0:0:0:0:0:1, traceId: 667ecad6db6f4991aa5f3043afbaf1f0","logger_name":"com.masaic.openai.api.config.LoggingConfig","thread_name":"reactor-http-nio-3","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:59:09.794761+05:30","@version":"1","message":"Creating streaming response with traceId: 667ecad6db6f4991aa5f3043afbaf1f0, model: gpt-4o","logger_name":"com.masaic.openai.api.service.MasaicResponseService","thread_name":"reactor-http-nio-3","level":"INFO","level_value":20000,"traceId":"667ecad6db6f4991aa5f3043afbaf1f0"}
{"@timestamp":"2025-03-23T12:59:16.335065+05:30","@version":"1","message":"Stream completed successfully - traceId: 667ecad6db6f4991aa5f3043afbaf1f0","logger_name":"com.masaic.openai.api.service.MasaicResponseService","thread_name":"openai-stream-handler-thread-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:59:16.336564+05:30","@version":"1","message":"Request completed - status: 200 OK, traceId: 667ecad6db6f4991aa5f3043afbaf1f0, path: /v1/responses","logger_name":"com.masaic.openai.api.config.LoggingConfig","thread_name":"reactor-http-nio-3","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:59:24.258816+05:30","@version":"1","message":"Incoming request - method: POST, path: /v1/responses, client: 0:0:0:0:0:0:0:1, traceId: 1cc22b248c1c43b098590b4500559d5b","logger_name":"com.masaic.openai.api.config.LoggingConfig","thread_name":"reactor-http-nio-3","level":"INFO","level_value":20000}
{"@timestamp":"2025-03-23T12:59:24.280239+05:30","@version":"1","message":"Creating response with traceId: 1cc22b248c1c43b098590b4500559d5b, model: gpt-4o","logger_name":"com.masaic.openai.api.service.MasaicResponseService","thread_name":"reactor-http-nio-3","level":"INFO","level_value":20000,"traceId":"1cc22b248c1c43b098590b4500559d5b"}
{"@timestamp":"2025-03-23T12:59:28.150313+05:30","@version":"1","message":"Request completed - status: 200 OK, traceId: 1cc22b248c1c43b098590b4500559d5b, path: /v1/responses","logger_name":"com.masaic.openai.api.config.LoggingConfig","thread_name":"reactor-http-nio-3","level":"INFO","level_value":20000}
