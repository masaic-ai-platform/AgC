name: Publish Release Pipeline

on:
  workflow_dispatch:
    inputs:
      run_mode:
        description: 'Select pipeline mode'
        required: true
        default: 'full'
        type: choice
        options:
          - artifacts-only
          - docker-only
          - artifacts-and-docker
          - trivy-only
          - full
      skip_tests:
        description: 'Skip tests during build'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'adopt'

jobs:
  build-artifacts:
    name: Build and Publish Artifacts
    if: ${{ github.event.inputs.run_mode == 'artifacts-only' || github.event.inputs.run_mode == 'artifacts-and-docker' || github.event.inputs.run_mode == 'full' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      gradle_version: ${{ steps.versions.outputs.gradle_version }}
      ui_version: ${{ steps.versions.outputs.ui_version }}
      gradle_tag_suffix: ${{ steps.versions.outputs.gradle_tag_suffix }}
      ui_tag_suffix: ${{ steps.versions.outputs.ui_tag_suffix }}
      is_stable: ${{ steps.versions.outputs.is_stable }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract versions
        id: versions
        run: |
          GRADLE_VERSION=$(grep 'version = "' platform/build.gradle.kts | head -1 | cut -d'"' -f2)
          echo "gradle_version=$GRADLE_VERSION" >> $GITHUB_OUTPUT
          UI_VERSION=$(grep '"version":' ui/package.json | head -1 | cut -d'"' -f4)
          echo "ui_version=$UI_VERSION" >> $GITHUB_OUTPUT
          if [[ "$GRADLE_VERSION" =~ -dev|-alpha|-beta|-rc|-SNAPSHOT ]]; then
            echo "is_stable=false" >> $GITHUB_OUTPUT
            echo "gradle_tag_suffix=dev" >> $GITHUB_OUTPUT
          else
            echo "is_stable=true" >> $GITHUB_OUTPUT
            echo "gradle_tag_suffix=latest" >> $GITHUB_OUTPUT
          fi
          if [[ "$UI_VERSION" =~ -dev|-alpha|-beta|-rc|-SNAPSHOT ]]; then
            echo "ui_tag_suffix=dev" >> $GITHUB_OUTPUT
          else
            echo "ui_tag_suffix=latest" >> $GITHUB_OUTPUT
          fi

      - name: Set up OpenJDK 21
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Make gradlew executable
        run: chmod +x ./platform/gradlew

      - name: Build with Gradle
        run: |
          if [ "${{ github.event.inputs.skip_tests }}" == "true" ]; then
            ./gradlew build -x test
          else
            ./gradlew build
          fi
        working-directory: ./platform

      - name: Delete existing unstable packages
        if: steps.versions.outputs.is_stable == 'false'
        run: |
          VERSION="${{ steps.versions.outputs.gradle_version }}"
          PACKAGES=(
            "open-responses-core"
            "open-responses-rest"
            "open-responses-server"
            "agc-platform-core"
            "agc-platform-rest"
            "agc-platform-server"
            "agc-test-regression-server"
            "agc-usecases-server"
          )
          
          echo "🗑️  Deleting unstable version packages: $VERSION"
          echo "This allows overriding unstable versions (dev/alpha/beta/rc/SNAPSHOT)"
          echo ""
          
          for PACKAGE in "${PACKAGES[@]}"; do
            PACKAGE_NAME="ai.masaic.agc.$PACKAGE"
            echo "📦 Processing: $PACKAGE_NAME"
            
            # Get the package version ID
            VERSION_ID=$(gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/orgs/masaic-ai-platform/packages/maven/$PACKAGE_NAME/versions" \
              --jq ".[] | select(.name == \"$VERSION\") | .id" 2>/dev/null || echo "")
            
            if [ -z "$VERSION_ID" ]; then
              echo "   ℹ️  Version $VERSION not found (first publish or already deleted)"
            else
              echo "   🗑️  Deleting version $VERSION (ID: $VERSION_ID)"
              gh api \
                --method DELETE \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/orgs/masaic-ai-platform/packages/maven/$PACKAGE_NAME/versions/$VERSION_ID" \
                2>/dev/null && echo "   ✅ Deleted successfully" || echo "   ⚠️  Delete failed (may not have permission)"
            fi
            echo ""
          done
          
          echo "✅ Cleanup complete - ready for fresh publish"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Publish to GitHub Packages
        run: ./gradlew publish
        working-directory: ./platform
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}

  docker-images:
    name: Build and Push Docker Images
    if: ${{ github.event.inputs.run_mode == 'docker-only' || github.event.inputs.run_mode == 'artifacts-and-docker' || github.event.inputs.run_mode == 'full' }}
    runs-on: ubuntu-latest
    needs: build-artifacts
    permissions:
      contents: read
      packages: write
    outputs:
      gradle_version: ${{ needs.build-artifacts.outputs.gradle_version }}
      ui_version: ${{ needs.build-artifacts.outputs.ui_version }}
      gradle_tag_suffix: ${{ needs.build-artifacts.outputs.gradle_tag_suffix }}
      ui_tag_suffix: ${{ needs.build-artifacts.outputs.ui_tag_suffix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push open-responses-server
        uses: docker/build-push-action@v6
        with:
          context: ./platform
          file: ./platform/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            masaicai/open-responses:${{ needs.build-artifacts.outputs.gradle_version }}
            masaicai/open-responses:${{ needs.build-artifacts.outputs.gradle_tag_suffix }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push agc-platform-server
        uses: docker/build-push-action@v6
        with:
          context: ./platform
          file: ./platform/Dockerfile-platform
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            masaicai/agc-platform-server:${{ needs.build-artifacts.outputs.gradle_version }}
            masaicai/agc-platform-server:${{ needs.build-artifacts.outputs.gradle_tag_suffix }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push platform-ui
        uses: docker/build-push-action@v6
        with:
          context: ./ui
          file: ./ui/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            masaicai/platform-ui:${{ needs.build-artifacts.outputs.ui_version }}
            masaicai/platform-ui:${{ needs.build-artifacts.outputs.ui_tag_suffix }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  trivy-scan:
    name: Trivy Security Scan and Upload SARIF
    if: ${{ github.event.inputs.run_mode == 'trivy-only' || github.event.inputs.run_mode == 'full' }}
    runs-on: ubuntu-latest
    needs: docker-images
    permissions:
      contents: read
      packages: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy scan on open-responses
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: masaicai/open-responses:${{ needs.build-artifacts.outputs.gradle_version }}
          format: sarif
          output: trivy-open-responses.sarif
        continue-on-error: true

      - name: Run Trivy scan on agc-platform-server
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: masaicai/agc-platform-server:${{ needs.build-artifacts.outputs.gradle_version }}
          format: sarif
          output: trivy-agc-platform.sarif
        continue-on-error: true

      - name: Run Trivy scan on platform-ui
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: masaicai/platform-ui:${{ needs.build-artifacts.outputs.ui_version }}
          format: sarif
          output: trivy-ui.sarif
        continue-on-error: true

      - name: Upload Trivy results for open-responses
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-open-responses.sarif
          category: trivy-open-responses

      - name: Upload Trivy results for agc-platform-server
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-agc-platform.sarif
          category: trivy-agc-platform

      - name: Upload Trivy results for platform-ui
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-ui.sarif
          category: trivy-ui

  summary:
    name: Publish Summary
    runs-on: ubuntu-latest
    needs: [build-artifacts, docker-images, trivy-scan]
    if: ${{ github.event.inputs.run_mode == 'full' }}
    steps:
      - name: Publish Summary
        run: |
          echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release Type:** ${{ needs.build-artifacts.outputs.is_stable == 'true' && '✅ Stable' || '🔧 Development' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.build-artifacts.outputs.is_stable }}" == "false" ]; then
            echo "> 💡 **Note:** Unstable versions automatically delete existing packages before publishing, allowing version overrides." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          echo "### Published Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### JAR Artifacts (GitHub Packages)" >> $GITHUB_STEP_SUMMARY
          echo "- \`ai.masaic.agc:open-responses-core:${{ needs.build-artifacts.outputs.gradle_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`ai.masaic.agc:open-responses-rest:${{ needs.build-artifacts.outputs.gradle_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`ai.masaic.agc:open-responses-server:${{ needs.build-artifacts.outputs.gradle_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`ai.masaic.agc:agc-platform-core:${{ needs.build-artifacts.outputs.gradle_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`ai.masaic.agc:agc-platform-rest:${{ needs.build-artifacts.outputs.gradle_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`ai.masaic.agc:agc-platform-server:${{ needs.build-artifacts.outputs.gradle_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Docker Images (Docker Hub)" >> $GITHUB_STEP_SUMMARY
          echo "- \`masaicai/open-responses:${{ needs.build-artifacts.outputs.gradle_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`masaicai/open-responses:${{ needs.build-artifacts.outputs.gradle_tag_suffix }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`masaicai/agc-platform-server:${{ needs.build-artifacts.outputs.gradle_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`masaicai/agc-platform-server:${{ needs.build-artifacts.outputs.gradle_tag_suffix }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`masaicai/platform-ui:${{ needs.build-artifacts.outputs.ui_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`masaicai/platform-ui:${{ needs.build-artifacts.outputs.ui_tag_suffix }}\`" >> $GITHUB_STEP_SUMMARY
